@page "/auction/{auctionId:int}/dashboard"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Auction Dashboard - Leagify Fantasy Auction</PageTitle>

<div class="dashboard-container">
    @if (isLoading)
    {
        <div class="loading-container">
            <FluentProgressRing />
            <FluentLabel>Loading auction dashboard...</FluentLabel>
        </div>
    }
    else if (session == null)
    {
        <div class="error-container">
            <FluentMessageBar Intent="MessageIntent.Warning">
                Session expired or invalid. Please join the auction again.
            </FluentMessageBar>
            <FluentButton Appearance="Appearance.Accent" 
                          OnClick="@(() => Navigation.NavigateTo("/join"))">
                Join Auction
            </FluentButton>
        </div>
    }
    else
    {
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16">
                <div style="flex: 1;">
                    <FluentLabel Typo="Typography.Header" Style="margin: 0;">
                        @(auctionName ?? "Auction Dashboard")
                    </FluentLabel>
                    <FluentLabel Style="color: #666; margin: 0;">
                        Welcome, @session.DisplayName
                    </FluentLabel>
                </div>
                
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12">
                    <FluentBadge Appearance="@(isConnected ? Appearance.Accent : Appearance.Neutral)"
                                 BackgroundColor="@(isConnected ? "#28a745" : "#6c757d")"
                                 Color="white">
                        @(isConnected ? "Connected" : "Disconnected")
                    </FluentBadge>

                    <FluentButton Appearance="Appearance.Stealth"
                                  IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
                                  OnClick="@HandleRefresh"
                                  Loading="@isRefreshing"
                                  Title="Refresh to check for role updates">
                        @if (isRefreshing)
                        {
                            <span>Refreshing...</span>
                        }
                        else
                        {
                            <span>Refresh</span>
                        }
                    </FluentButton>

                    <FluentButton Appearance="Appearance.Neutral"
                                  IconStart="@(new Icons.Regular.Size16.ArrowExit())"
                                  OnClick="@HandleLogout">
                        Leave Auction
                    </FluentButton>
                </FluentStack>
            </FluentStack>
        </div>

        <!-- Role Information -->
        @if (userRoles.Any())
        {
            <div class="role-section">
                <FluentCard>
                    <FluentLabel Typo="Typography.Subject" Style="margin-bottom: 16px;">
                        Your Role(s) in this Auction
                    </FluentLabel>
                    
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" Wrap="true">
                        @foreach (var role in userRoles)
                        {
                            <FluentBadge Appearance="@GetRoleAppearance(role.Role)" 
                                         BackgroundColor="@GetRoleColor(role.Role)"
                                         Color="white">
                                @GetRoleDisplayName(role.Role)
                                @if (!string.IsNullOrEmpty(role.TeamName))
                                {
                                    <span> - @role.TeamName</span>
                                }
                            </FluentBadge>
                        }
                    </FluentStack>
                    
                    @if (!userRoles.Any())
                    {
                        <FluentLabel Style="color: #666; font-style: italic;">
                            No role assigned yet. The auction master will assign your role shortly.
                        </FluentLabel>
                    }
                </FluentCard>
            </div>
        }
        else
        {
            <div class="role-section">
                <FluentCard>
                    <FluentMessageBar Intent="MessageIntent.Info">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Clock())" Style="margin-right: 8px;" />
                        Waiting for role assignment by the auction master...
                    </FluentMessageBar>
                </FluentCard>
            </div>
        }

        <!-- Auction Status -->
        <div class="status-section">
            <FluentCard>
                <FluentLabel Typo="Typography.Subject" Style="margin-bottom: 16px;">
                    Auction Status
                </FluentLabel>
                
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Info())" />
                        <FluentLabel>Status: Draft - Waiting for auction to begin</FluentLabel>
                    </FluentStack>
                    
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                        <FluentIcon Value="@(new Icons.Regular.Size16.People())" />
                        <FluentLabel>Participants: @participantCount</FluentLabel>
                    </FluentStack>
                    
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Calendar())" />
                        <FluentLabel>Joined: @session.JoinedDate.ToString("MMM dd, yyyy 'at' h:mm tt")</FluentLabel>
                    </FluentStack>
                </FluentStack>
            </FluentCard>
        </div>

        <!-- Instructions -->
        <div class="instructions-section">
            <FluentCard>
                <FluentLabel Typo="Typography.Subject" Style="margin-bottom: 16px;">
                    What's Next?
                </FluentLabel>
                
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentLabel>1. Wait for the auction master to assign you a role</FluentLabel>
                    <FluentLabel>2. Once assigned, you'll see role-specific options appear</FluentLabel>
                    <FluentLabel>3. The auction will begin when all participants are ready</FluentLabel>
                    <FluentLabel Style="color: #666; font-size: 14px; margin-top: 12px;">
                        Keep this page open - it will update automatically when the auction begins.
                    </FluentLabel>
                </FluentStack>
            </FluentCard>
        </div>
    }
</div>

@code {
    [Parameter] public int AuctionId { get; set; }

    private UserSession? session;
    private List<RoleDto> userRoles = new();
    private bool isLoading = true;
    private bool isConnected = false;
    private string? auctionName;
    private int participantCount = 0;
    private bool isRefreshing = false;

    private Timer? autoRefreshTimer;
    private readonly TimeSpan AutoRefreshInterval = TimeSpan.FromSeconds(30); // Auto-refresh every 30 seconds

    protected override async Task OnInitializedAsync()
    {
        await LoadSession();
        if (session != null)
        {
            await LoadDashboardData();
            StartAutoRefresh();
        }
    }

    public void Dispose()
    {
        StopAutoRefresh();
    }

    private void StartAutoRefresh()
    {
        // Auto-refresh every 30 seconds to check for role updates
        autoRefreshTimer = new Timer(async _ =>
        {
            if (!isRefreshing && session != null)
            {
                try
                {
                    await InvokeAsync(async () =>
                    {
                        await LoadDashboardData();
                        StateHasChanged();
                    });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Auto-refresh error: {ex.Message}");
                }
            }
        }, null, AutoRefreshInterval, AutoRefreshInterval);
    }

    private void StopAutoRefresh()
    {
        autoRefreshTimer?.Dispose();
        autoRefreshTimer = null;
    }

    private async Task HandleRefresh()
    {
        if (isRefreshing || session == null) return;

        try
        {
            isRefreshing = true;
            StateHasChanged();

            Console.WriteLine("=== MANUAL REFRESH TRIGGERED ===");
            await LoadDashboardData();
            Console.WriteLine("✓ Dashboard data refreshed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Refresh error: {ex.Message}");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task LoadSession()
    {
        try
        {
            var sessionJson = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "auctionSession");
            if (!string.IsNullOrEmpty(sessionJson))
            {
                session = JsonSerializer.Deserialize<UserSession>(sessionJson);
                
                if (session != null && session.AuctionId != AuctionId)
                {
                    // Wrong auction ID in session
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "auctionSession");
                    session = null;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading session: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadDashboardData()
    {
        if (session == null) return;

        try
        {
            // Set session token for API calls
            Http.DefaultRequestHeaders.Remove("X-Auction-Token");
            Http.DefaultRequestHeaders.Add("X-Auction-Token", session.SessionToken);

            // Load auction basic info (we'll need an endpoint for this)
            // For now, just set a placeholder
            auctionName = "Fantasy Draft Auction";
            
            // Load participants to get count and user roles
            var participantsResponse = await Http.GetAsync($"/api/auction/{AuctionId}/participants");
            if (participantsResponse.IsSuccessStatusCode)
            {
                var participants = await participantsResponse.Content.ReadFromJsonAsync<List<ParticipantDto>>();
                if (participants != null)
                {
                    participantCount = participants.Count;
                    var currentUser = participants.FirstOrDefault(p => p.UserId == session.UserId);
                    if (currentUser != null)
                    {
                        var previousRoleCount = userRoles.Count;
                        userRoles = currentUser.Roles;
                        isConnected = currentUser.IsConnected;

                        // Log role changes for user awareness
                        if (userRoles.Count != previousRoleCount)
                        {
                            Console.WriteLine($"=== ROLE UPDATE DETECTED (Called from LoadDashboardData) ===");
                            Console.WriteLine($"Previous roles: {previousRoleCount}, Current roles: {userRoles.Count}");
                            Console.WriteLine($"Connection status: {(isConnected ? "Connected" : "Disconnected")}");
                            foreach (var role in userRoles)
                            {
                                var teamInfo = !string.IsNullOrEmpty(role.TeamName) ? $" (Team: {role.TeamName})" : "";
                                Console.WriteLine($"✓ Assigned role: {role.Role}{teamInfo}");
                            }
                        }
                    }
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            Console.WriteLine("🚪 === LEAVE AUCTION BUTTON CLICKED ===");

            // Stop auto-refresh to prevent interference
            StopAutoRefresh();

            // Get session data to call leave auction API
            var sessionData = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "auctionSession");
            Console.WriteLine($"Session data retrieved: {!string.IsNullOrEmpty(sessionData)}");

            if (!string.IsNullOrEmpty(sessionData))
            {
                Console.WriteLine($"🔍 About to parse session data: {sessionData}");

                try
                {
                    Console.WriteLine("📋 Starting JSON parsing...");
                    Console.WriteLine($"📋 Raw session data length: {sessionData.Length}");

                    using var document = System.Text.Json.JsonDocument.Parse(sessionData);
                    var root = document.RootElement;
                    Console.WriteLine("✓ JSON parsed successfully");
                    Console.WriteLine($"✓ JSON root kind: {root.ValueKind}");

                    Console.WriteLine("🔎 Enumerating all available properties...");
                    var properties = root.EnumerateObject().Select(p => $"{p.Name}={p.Value}").ToArray();
                    Console.WriteLine($"🔎 Available properties: [{string.Join(", ", properties)}]");

                    Console.WriteLine("🔎 Checking for AuctionId and SessionToken properties...");
                    var hasAuctionId = root.TryGetProperty("AuctionId", out var auctionIdProperty);
                    var hasSessionToken = root.TryGetProperty("SessionToken", out var sessionTokenProperty);

                    Console.WriteLine($"Has AuctionId: {hasAuctionId}, Has SessionToken: {hasSessionToken}");

                    if (hasAuctionId)
                    {
                        Console.WriteLine($"AuctionId property kind: {auctionIdProperty.ValueKind}");
                    }
                    if (hasSessionToken)
                    {
                        Console.WriteLine($"SessionToken property kind: {sessionTokenProperty.ValueKind}");
                    }

                    if (hasAuctionId && hasSessionToken)
                    {
                        Console.WriteLine("🔑 Both properties found, extracting values...");

                        try
                        {
                            var auctionId = auctionIdProperty.GetInt32();
                            Console.WriteLine($"✓ AuctionId extracted: {auctionId}");

                            var sessionToken = sessionTokenProperty.GetString();
                            Console.WriteLine($"✓ SessionToken extracted: {sessionToken?[..8]}...");

                            Console.WriteLine($"🔑 Final validation - AuctionId: {auctionId}, SessionToken empty: {string.IsNullOrEmpty(sessionToken)}");

                            if (auctionId > 0 && !string.IsNullOrEmpty(sessionToken))
                            {
                                Console.WriteLine("✓ Values valid, proceeding with API call...");
                                // Notify server of disconnection
                                try
                                {
                                Console.WriteLine($"=== LEAVE AUCTION DEBUG ===");
                                Console.WriteLine($"AuctionId: {auctionId}");
                                Console.WriteLine($"SessionToken: {sessionToken}");

                                Http.DefaultRequestHeaders.Remove("X-Auction-Token");
                                Http.DefaultRequestHeaders.Add("X-Auction-Token", sessionToken);

                                var response = await Http.PostAsync($"/api/auction/{auctionId}/leave", null);
                                var responseText = await response.Content.ReadAsStringAsync();

                                Console.WriteLine($"Leave API Response Status: {response.StatusCode}");
                                Console.WriteLine($"Leave API Response Body: {responseText}");

                                if (response.IsSuccessStatusCode)
                                {
                                    Console.WriteLine("✓ Successfully notified server of disconnection");
                                }
                                else
                                {
                                    Console.WriteLine($"❌ Failed to notify server of disconnection: {response.StatusCode}");
                                }

                                // Test: Check participant status immediately after leave
                                try
                                {
                                    Http.DefaultRequestHeaders.Remove("X-Auction-Token");
                                    var participantsResponse = await Http.GetAsync($"/api/auction/{auctionId}/participants");
                                    if (participantsResponse.IsSuccessStatusCode)
                                    {
                                        var participantsText = await participantsResponse.Content.ReadAsStringAsync();
                                        Console.WriteLine($"Participants after leave: {participantsText}");
                                    }
                                }
                                catch (Exception checkEx)
                                {
                                    Console.WriteLine($"Error checking participants after leave: {checkEx.Message}");
                                }
                            }
                            catch (Exception apiEx)
                            {
                                Console.WriteLine($"Error notifying server of disconnection: {apiEx.Message}");
                            }
                            }
                            else
                            {
                                Console.WriteLine($"❌ Invalid values - AuctionId: {auctionId}, SessionToken empty: {string.IsNullOrEmpty(sessionToken)}");
                            }
                        }
                        catch (Exception extractEx)
                        {
                            Console.WriteLine($"❌ Error extracting values from JSON properties: {extractEx.Message}");
                            Console.WriteLine($"❌ AuctionId raw: {auctionIdProperty}");
                            Console.WriteLine($"❌ SessionToken raw: {sessionTokenProperty}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("❌ Missing required properties in session data");
                        Console.WriteLine($"Available properties: {string.Join(", ", root.EnumerateObject().Select(p => p.Name))}");
                    }
                }
                catch (Exception jsonEx)
                {
                    Console.WriteLine($"❌ JSON parsing error: {jsonEx.Message}");
                    Console.WriteLine($"❌ Session data that failed to parse: {sessionData}");
                }
            }
            
            // Clear session storage
            Console.WriteLine("🧹 Clearing session storage");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "auctionSession");

            // Navigate back to join page
            Console.WriteLine("🔄 Navigating to join page");
            Navigation.NavigateTo("/join");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
            
            // Clear session storage anyway
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "auctionSession");
            
            // Still navigate away even if cleanup fails
            Navigation.NavigateTo("/join");
        }
    }

    private static Appearance GetRoleAppearance(string role) => role switch
    {
        "AuctionMaster" => Appearance.Accent,
        "TeamCoach" => Appearance.Neutral,
        "ProxyCoach" => Appearance.Lightweight,
        _ => Appearance.Neutral
    };

    private static string GetRoleColor(string role) => role switch
    {
        "AuctionMaster" => "#0078d4",
        "TeamCoach" => "#107c10",
        "ProxyCoach" => "#ca5010",
        _ => "#605e5c"
    };

    private static string GetRoleDisplayName(string role) => role switch
    {
        "AuctionMaster" => "Auction Master",
        "TeamCoach" => "Team Coach",
        "ProxyCoach" => "Proxy Coach",
        "Viewer" => "Viewer",
        _ => role
    };

    // DTOs - these should match the API models
    private class UserSession
    {
        public int UserId { get; set; }
        public int AuctionId { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public string SessionToken { get; set; } = string.Empty;
        public DateTime JoinedDate { get; set; }
    }

    private class ParticipantDto
    {
        public int UserId { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public bool IsConnected { get; set; }
        public DateTime JoinedDate { get; set; }
        public DateTime LastActiveDate { get; set; }
        public bool IsReconnectionPending { get; set; }
        public List<RoleDto> Roles { get; set; } = new();
    }

    private class RoleDto
    {
        public int UserRoleId { get; set; }
        public string Role { get; set; } = string.Empty;
        public int? TeamId { get; set; }
        public string? TeamName { get; set; }
        public DateTime AssignedDate { get; set; }
    }
}

<style>
    .dashboard-container {
        padding: 24px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: calc(100vh - 100px);
    }

    .loading-container, .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        gap: 16px;
    }

    .dashboard-header {
        background: white;
        padding: 24px;
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        margin-bottom: 24px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .role-section, .status-section, .instructions-section {
        margin-bottom: 24px;
    }

    .role-section fluent-card,
    .status-section fluent-card,
    .instructions-section fluent-card {
        padding: 24px;
        border: 1px solid #e1e1e1;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    /* Mobile responsive styles */
    .dashboard-mobile {
        padding: 16px;
    }
</style>