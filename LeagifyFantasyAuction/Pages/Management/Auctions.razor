@page "/management/auctions"
@layout ManagementLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Auction Management</PageTitle>

<div class="auction-container">
    <div class="header-row">
        <h2>Auction Management</h2>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Add())" OnClick="OpenCreateAuctionDialog">
            Create Auction
        </FluentButton>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <FluentProgressRing />
            <span>Loading auctions...</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <FluentMessageBar Intent="MessageIntent.Error">
            <strong>Error:</strong> @errorMessage
        </FluentMessageBar>
    }
    else
    {
        <div class="auctions-grid">
            @if (auctions.Any())
            {
                <FluentDataGrid Items="@auctions.AsQueryable()" Pagination="@pagination" GridTemplateColumns="1fr 150px 120px 150px 200px 120px">
                    <PropertyColumn Property="@(a => a.Name)" Title="Auction Name" Sortable="true" />
                    <TemplateColumn Title="Status" Sortable="true">
                        <ChildContent Context="auction">
                            <FluentBadge Appearance="@GetStatusBadgeAppearance(auction.Status)">
                                @auction.Status
                            </FluentBadge>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Property="@(a => a.CreatedDate.ToString("MM/dd/yyyy"))" Title="Created" Sortable="true" />
                    <TemplateColumn Title="Join Code">
                        <ChildContent Context="auction">
                            <div class="join-code">
                                <code>@auction.JoinCode</code>
                                <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Copy())" 
                                              OnClick="@(() => CopyToClipboard(auction.JoinCode))" Title="Copy join code" />
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn Title="Master Code">
                        <ChildContent Context="auction">
                            <div class="master-code">
                                <code class="master-code-text">@auction.MasterCode</code>
                                <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Copy())" 
                                              OnClick="@(() => CopyToClipboard(auction.MasterCode))" Title="Copy master code" />
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions" Align="@Align.Center">
                        <ChildContent Context="auction">
                            <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Settings())" 
                                          OnClick="@(() => EditAuction(auction))" Title="Configure auction" />
                            <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Delete())" 
                                          OnClick="@(() => DeleteAuction(auction))" Title="Delete auction" />
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
                
                <FluentPaginator State="@pagination" />
            }
            else
            {
                <div class="empty-state">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Database())" />
                    <h3>No Auctions Yet</h3>
                    <p>Create your first auction to get started with the draft system.</p>
                    <FluentButton Appearance="Appearance.Accent" OnClick="OpenCreateAuctionDialog">
                        Create First Auction
                    </FluentButton>
                </div>
            }
        </div>
    }
</div>

<!-- Create Auction Dialog -->
<FluentDialog @ref="createDialog" @bind-Hidden="@hideCreateDialog">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" />
            <FluentLabel Typo="Typography.PaneHeader">Create New Auction</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
            <FluentTextField @bind-Value="newAuction.Name" Label="Auction Name" Required="true" 
                            Placeholder="e.g., 2025 NFL Draft League" />
            <FluentTextArea @bind-Value="newAuction.Description" Label="Description (Optional)" 
                           Placeholder="Brief description of the auction rules or league" />
            
            <FluentMessageBar Intent="MessageIntent.Info">
                <strong>ℹ️ Note:</strong> After creating the auction, you'll be able to upload CSV data and configure roster positions.
            </FluentMessageBar>
        </FluentStack>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="CancelCreateAuction">Cancel</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="CreateAuction" Loading="@isCreating">
            @if (isCreating)
            {
                <text>Creating...</text>
            }
            else
            {
                <text>Create Auction</text>
            }
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

<!-- Configure Auction Dialog -->
<FluentDialog @ref="configureDialog" @bind-Hidden="@hideConfigureDialog" Style="width: 800px; max-width: 90vw;">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Settings())" />
            <FluentLabel Typo="Typography.PaneHeader">Configure Auction: @(selectedAuction?.Name ?? "")</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        @if (selectedAuction != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
                
                <!-- CSV Import Section -->
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                        <FluentLabel Typo="Typography.Subject">School Data Import</FluentLabel>
                        <FluentLabel>Upload a CSV file containing school data for this auction.</FluentLabel>
                        
                        @if (!showSchoolMatching)
                        {
                            <!-- Use Standard HTML File Input (FluentUI version has null Stream/Buffer issue) -->
                            <div style="padding: 12px; border: 2px dashed #0078d4; border-radius: 8px; background-color: #f8f9fa;">
                                <FluentLabel Typo="Typography.Body">Select CSV file to upload:</FluentLabel>
                                <InputFile OnChange="HandleStandardFileUpload" accept=".csv" style="width: 100%; margin-top: 8px; padding: 8px;" />
                                <FluentLabel Typo="Typography.Body" style="color: #666; margin-top: 4px; font-size: 0.85em;">
                                    Supported format: CSV files with school data (.csv)
                                </FluentLabel>
                            </div>
                            
                            @if (isCsvUploading)
                            {
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                                    <FluentProgressRing Style="width: 20px; height: 20px;" />
                                    <FluentLabel>Processing CSV...</FluentLabel>
                                </FluentStack>
                            }
                            
                            @if (!string.IsNullOrEmpty(csvUploadMessage))
                            {
                                <FluentMessageBar Intent="@(csvUploadMessage.Contains("Error") ? MessageIntent.Error : MessageIntent.Success)">
                                    @csvUploadMessage
                                </FluentMessageBar>
                            }
                        }
                        else
                        {
                            <!-- School Matching Interface with Summary -->
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                                <FluentLabel Typo="Typography.Subject">CSV Import Preview</FluentLabel>
                                
                                <!-- Summary Statistics -->
                                <FluentCard Style="padding: 16px; background-color: #f8f9fa; border: 2px solid #0078d4;">
                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                                        <FluentLabel Weight="FontWeight.Bold" Typo="Typography.Body">Import Summary</FluentLabel>
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="32">
                                            <div style="text-align: center;">
                                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #28a745; line-height: 1;">
                                                    @schoolMatches.Count(m => m.MatchType == SchoolMatchType.Exact)
                                                </FluentLabel>
                                                <FluentLabel Style="font-size: 14px; color: #666;">Exact Matches</FluentLabel>
                                            </div>
                                            <div style="text-align: center;">
                                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #ffc107; line-height: 1;">
                                                    @schoolMatches.Count(m => m.MatchType == SchoolMatchType.Fuzzy)
                                                </FluentLabel>
                                                <FluentLabel Style="font-size: 14px; color: #666;">Fuzzy Matches</FluentLabel>
                                            </div>
                                            <div style="text-align: center;">
                                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #dc3545; line-height: 1;">
                                                    @schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch)
                                                </FluentLabel>
                                                <FluentLabel Style="font-size: 14px; color: #666;">New Schools</FluentLabel>
                                            </div>
                                            <div style="text-align: center;">
                                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #6c757d; line-height: 1;">
                                                    @schoolMatches.Count
                                                </FluentLabel>
                                                <FluentLabel Style="font-size: 14px; color: #666;">Total Schools</FluentLabel>
                                            </div>
                                        </FluentStack>
                                    </FluentStack>
                                </FluentCard>

                                @if (schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch) > 0)
                                {
                                    <FluentMessageBar Intent="MessageIntent.Warning">
                                        <strong>@schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch) new schools</strong> will be created and added to the database.
                                    </FluentMessageBar>
                                }
                                
                                <!-- Filter Buttons -->
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" VerticalAlignment="VerticalAlignment.Center">
                                    <FluentLabel>Show:</FluentLabel>
                                    <FluentButton Appearance="@(currentFilter == MatchFilter.All ? Appearance.Accent : Appearance.Neutral)" 
                                                Size="Size.Small" OnClick="() => SetMatchFilter(MatchFilter.All)">
                                        All (@schoolMatches.Count)
                                    </FluentButton>
                                    <FluentButton Appearance="@(currentFilter == MatchFilter.Exact ? Appearance.Accent : Appearance.Neutral)" 
                                                Size="Size.Small" OnClick="() => SetMatchFilter(MatchFilter.Exact)">
                                        Exact (@schoolMatches.Count(m => m.MatchType == SchoolMatchType.Exact))
                                    </FluentButton>
                                    <FluentButton Appearance="@(currentFilter == MatchFilter.Fuzzy ? Appearance.Accent : Appearance.Neutral)" 
                                                Size="Size.Small" OnClick="() => SetMatchFilter(MatchFilter.Fuzzy)">
                                        Fuzzy (@schoolMatches.Count(m => m.MatchType == SchoolMatchType.Fuzzy))
                                    </FluentButton>
                                    <FluentButton Appearance="@(currentFilter == MatchFilter.New ? Appearance.Accent : Appearance.Neutral)" 
                                                Size="Size.Small" OnClick="() => SetMatchFilter(MatchFilter.New)">
                                        New (@schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch))
                                    </FluentButton>
                                </FluentStack>
                                
                                <!-- Filtered School List -->
                                <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px;">
                                    @foreach (var match in GetFilteredMatches())
                                    {
                                        <FluentCard Style="@($"margin: 0; padding: 16px; border-radius: 0; border-bottom: 1px solid #eee; background-color: {GetMatchCardColor(match)};")">
                                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16">
                                                <FluentStack Orientation="Orientation.Vertical" Style="flex: 1;" VerticalGap="4">
                                                    <FluentLabel Weight="FontWeight.Bold" Style="font-size: 16px;">@match.CsvData.Name</FluentLabel>
                                                    <FluentLabel Style="font-size: 14px; color: #666;">@match.CsvData.Conference • @match.CsvData.LeagifyPosition</FluentLabel>
                                                    @if (match.MatchType == SchoolMatchType.Fuzzy && match.MatchedSchool != null)
                                                    {
                                                        <FluentLabel Style="font-size: 13px; color: #495057;">→ Matches: <strong>@match.MatchedSchool.Name</strong></FluentLabel>
                                                    }
                                                </FluentStack>
                                                
                                                @if (match.MatchType == SchoolMatchType.Exact)
                                                {
                                                    <FluentBadge Appearance="Appearance.Accent">EXACT</FluentBadge>
                                                }
                                                else if (match.MatchType == SchoolMatchType.Fuzzy)
                                                {
                                                    <FluentBadge Appearance="Appearance.Neutral">FUZZY @(Math.Round(match.Confidence * 100))%</FluentBadge>
                                                }
                                                else
                                                {
                                                    <FluentBadge BackgroundColor="#dc3545" Color="#fff">NEW</FluentBadge>
                                                }
                                            </FluentStack>
                                        </FluentCard>
                                    }
                                </div>
                                
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" HorizontalAlignment="HorizontalAlignment.Center">
                                    <FluentButton Appearance="Appearance.Accent" OnClick="@ConfirmCsvImport">
                                        Confirm Import (@schoolMatches.Count schools)
                                    </FluentButton>
                                    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelSchoolMatching">
                                        Cancel
                                    </FluentButton>
                                </FluentStack>
                            </FluentStack>
                        }
                    </FluentStack>
                </FluentCard>

                <!-- Roster Design Section -->
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Grid())" />
                            <FluentLabel Typo="Typography.Subject">Roster Configuration</FluentLabel>
                        </FluentStack>
                        <FluentLabel Style="color: #666;">Define the structure of fantasy teams for this auction.</FluentLabel>
                        
                        @if (!showRosterDesign)
                        {
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12">
                                <FluentButton Appearance="Appearance.Accent" 
                                              OnClick="@ShowRosterDesign"
                                              IconStart="@(new Icons.Regular.Size16.Add())"
                                              Loading="isLoadingRosterConfig">
                                    Configure Roster Positions
                                </FluentButton>
                                
                                @if (rosterPositions.Any())
                                {
                                    <FluentLabel Style="color: #28a745; align-self: center;">
                                        ✓ @rosterPositions.Count position(s) configured
                                    </FluentLabel>
                                }
                            </FluentStack>
                        }
                        else
                        {
                            <!-- Roster Position Configuration Interface -->
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                                
                                <!-- Add New Position Section -->
                                <FluentCard Style="background-color: #f8f9fa; border: 1px solid #dee2e6;">
                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                                        <FluentLabel Weight="FontWeight.Bold">Add New Position</FluentLabel>
                                        
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" Wrap="true">
                                            <div style="flex: 1; min-width: 200px;">
                                                @if (availablePositions.Any())
                                                {
                                                    <FluentSelect @bind-Value="newPosition.PositionName"
                                                                  Label="Position Name"
                                                                  Items="@GetPositionOptions()"
                                                                  OptionText="@(item => item)"
                                                                  OptionValue="@(item => item)"
                                                                  Required="true" />
                                                    
                                                    @if (newPosition.PositionName == "Custom")
                                                    {
                                                        <FluentTextField @bind-Value="newPosition.CustomPositionName" 
                                                                         Label="Custom Position Name" 
                                                                         Placeholder="Enter custom position name"
                                                                         Style="margin-top: 8px;"
                                                                         Required="true" />
                                                    }
                                                }
                                                else
                                                {
                                                    <FluentTextField @bind-Value="newPosition.PositionName" 
                                                                     Label="Position Name" 
                                                                     Placeholder="Import schools first to see position options"
                                                                     Required="true" />
                                                    <FluentLabel Style="color: #666; font-size: 0.85em; margin-top: 4px;">
                                                        Import schools via CSV to populate position options from LeagifyPosition column
                                                    </FluentLabel>
                                                }
                                            </div>
                                            <div style="width: 120px;">
                                                <FluentNumberField @bind-Value="newPosition.SlotsPerTeam" 
                                                                   Label="Slots per Team" 
                                                                   Min="1" 
                                                                   Max="10"
                                                                   Required="true" />
                                            </div>
                                            <div style="width: 100px;">
                                                <FluentLabel Style="margin-bottom: 4px;">Color</FluentLabel>
                                                <input type="color" @bind="newPosition.ColorCode" 
                                                       style="width: 100%; height: 32px; border: 1px solid #ccc; border-radius: 4px;" />
                                            </div>
                                        </FluentStack>
                                        
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" VerticalAlignment="VerticalAlignment.Center">
                                            <FluentCheckbox @bind-Value="newPosition.IsFlexPosition" Label="Flex Position" />
                                            <FluentLabel Style="color: #666; font-size: 0.9em;">(accepts any school type)</FluentLabel>
                                        </FluentStack>
                                        
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                                            <FluentButton Appearance="Appearance.Accent" 
                                                          OnClick="@AddRosterPosition"
                                                          Disabled="@(IsAddPositionDisabled())"
                                                          Loading="isAddingPosition">
                                                Add Position
                                            </FluentButton>
                                        </FluentStack>
                                    </FluentStack>
                                </FluentCard>
                                
                                <!-- Current Positions List -->
                                @if (rosterPositions.Any())
                                {
                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                                        <FluentLabel Weight="FontWeight.Bold">Current Roster Positions</FluentLabel>
                                        
                                        <div style="border: 1px solid #dee2e6; border-radius: 8px; overflow: hidden;">
                                            @foreach (var position in rosterPositions.OrderBy(p => p.DisplayOrder))
                                            {
                                                <div style="@($"padding: 12px; border-bottom: 1px solid #eee; background-color: {position.ColorCode}20;")"
                                                     @key="position.RosterPositionId">
                                                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                                        <div style="@($"width: 20px; height: 20px; background-color: {position.ColorCode}; border-radius: 3px; border: 1px solid #ccc;")"></div>
                                                        <FluentStack Orientation="Orientation.Vertical" Style="flex: 1;">
                                                            <FluentLabel Weight="FontWeight.Bold">@position.PositionName</FluentLabel>
                                                            <FluentLabel Style="font-size: 0.9em; color: #666;">
                                                                @position.SlotsPerTeam slot@(position.SlotsPerTeam != 1 ? "s" : "") per team
                                                                @if (position.IsFlexPosition) { <text> • Flex Position</text> }
                                                            </FluentLabel>
                                                        </FluentStack>
                                                        
                                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                                                            <FluentButton Appearance="Appearance.Neutral" 
                                                                          IconStart="@(new Icons.Regular.Size16.ArrowUp())"
                                                                          OnClick="@(() => MovePositionUp(position))"
                                                                          Disabled="@(rosterPositions.OrderBy(p => p.DisplayOrder).First() == position)"
                                                                          Title="Move up" />
                                                            <FluentButton Appearance="Appearance.Neutral" 
                                                                          IconStart="@(new Icons.Regular.Size16.ArrowDown())"
                                                                          OnClick="@(() => MovePositionDown(position))"
                                                                          Disabled="@(rosterPositions.OrderBy(p => p.DisplayOrder).Last() == position)"
                                                                          Title="Move down" />
                                                            <FluentButton Appearance="Appearance.Neutral" 
                                                                          IconStart="@(new Icons.Regular.Size16.Delete())"
                                                                          OnClick="@(() => RemoveRosterPosition(position))"
                                                                          Loading="@(deletingPositionId == position.RosterPositionId)"
                                                                          Title="Delete" />
                                                        </FluentStack>
                                                    </FluentStack>
                                                </div>
                                            }
                                        </div>
                                        
                                        <!-- Roster Summary -->
                                        <FluentCard Style="background-color: #e3f2fd; border: 1px solid #2196f3;">
                                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                                                <FluentLabel Weight="FontWeight.Bold" Style="color: #1976d2;">Team Composition Summary</FluentLabel>
                                                <FluentLabel Style="color: #1976d2;">
                                                    Each team will have <strong>@rosterPositions.Sum(p => p.SlotsPerTeam) schools</strong> total
                                                    (@rosterPositions.Count(p => !p.IsFlexPosition) specific position@(rosterPositions.Count(p => !p.IsFlexPosition) != 1 ? "s" : ""), 
                                                     @rosterPositions.Where(p => p.IsFlexPosition).Sum(p => p.SlotsPerTeam) flex slot@(rosterPositions.Where(p => p.IsFlexPosition).Sum(p => p.SlotsPerTeam) != 1 ? "s" : ""))
                                                </FluentLabel>
                                            </FluentStack>
                                        </FluentCard>
                                    </FluentStack>
                                }
                                
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                                    <FluentButton Appearance="Appearance.Neutral" OnClick="@HideRosterDesign">
                                        Done Configuring
                                    </FluentButton>
                                </FluentStack>
                            </FluentStack>
                        }
                    </FluentStack>
                </FluentCard>
                
            </FluentStack>
        }
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CloseConfigureDialog">Close</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private List<AuctionDto> auctions = new();
    private bool isLoading = true;
    private bool isCreating = false;
    private string errorMessage = "";
    private PaginationState pagination = new() { ItemsPerPage = 10 };

    // Dialog state
    private FluentDialog? createDialog;
    private bool hideCreateDialog = true;
    private CreateAuctionRequest newAuction = new();

    // Configuration dialog state
    private FluentDialog? configureDialog;
    private bool hideConfigureDialog = true;
    private AuctionDto? selectedAuction;
    private int selectedAuctionId;

    // CSV import state
    // Removed csvFileInput reference - using standard HTML InputFile instead
    private bool isCsvUploading = false;
    private string csvUploadMessage = "";
    private List<SchoolMatchPreview> schoolMatches = new();
    private bool showSchoolMatching = false;
    
    // Match filtering
    private MatchFilter currentFilter = MatchFilter.All;
    
    // Roster design state
    private bool showRosterDesign = false;
    private bool isLoadingRosterConfig = false;
    private bool isAddingPosition = false;
    private int? deletingPositionId = null;
    private List<RosterPositionDto> rosterPositions = new();
    private NewRosterPosition newPosition = new();
    private List<string> availablePositions = new();

    public enum MatchFilter
    {
        All,
        Exact,
        Fuzzy,
        New
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAuctions();
    }

    private async Task LoadAuctions()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            // Get token from localStorage and set it in the request header
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authentication token missing. Please log in again.";
                return;
            }

            // Remove any existing X-Management-Token header and add the current one
            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetFromJsonAsync<List<AuctionDto>>("/api/management/auctions");
            auctions = response ?? new List<AuctionDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load auctions: {ex.Message}";
            Console.WriteLine($"Error loading auctions: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenCreateAuctionDialog()
    {
        newAuction = new CreateAuctionRequest();
        hideCreateDialog = false;
        StateHasChanged();
    }

    private void CancelCreateAuction()
    {
        hideCreateDialog = true;
        newAuction = new CreateAuctionRequest();
        StateHasChanged();
    }

    private async Task CreateAuction()
    {
        if (string.IsNullOrWhiteSpace(newAuction.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter an auction name.");
            return;
        }

        try
        {
            isCreating = true;
            StateHasChanged();

            // Get token from localStorage and set it in the request header
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            // Remove any existing X-Management-Token header and add the current one
            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsJsonAsync("/api/management/auctions", newAuction);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadAuctions(); // Refresh the list
                hideCreateDialog = true;
                newAuction = new CreateAuctionRequest();
                await JSRuntime.InvokeVoidAsync("alert", "Auction created successfully!");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to create auction: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating auction: {ex.Message}");
            Console.WriteLine($"Error creating auction: {ex}");
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void CloseConfigureDialog()
    {
        hideConfigureDialog = true;
        selectedAuction = null;
        showSchoolMatching = false;
        schoolMatches.Clear();
        csvUploadMessage = "";
        
        // Reset roster design state
        showRosterDesign = false;
        rosterPositions.Clear();
        availablePositions.Clear();
        ResetNewPosition();
        
        StateHasChanged();
    }

    // FluentUI file upload - removed due to null Stream/Buffer issue
    // Using standard HTML InputFile instead (HandleStandardFileUpload method)

    private async Task ConfirmCsvImport()
    {
        if (selectedAuction == null || !schoolMatches.Any()) return;

        try
        {
            isCsvUploading = true;
            StateHasChanged();

            // Prepare confirmed matches
            var confirmedMatches = schoolMatches.Select(m => new ConfirmedSchoolMatch
            {
                SchoolId = m.MatchedSchool?.SchoolId ?? 0, // Will create new school if 0
                CsvData = m.CsvData,
                ImportOrder = m.ImportOrder
            }).ToList();

            // Get token and send confirmation
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsJsonAsync($"/api/management/auctions/{selectedAuction.AuctionId}/csv/confirm", confirmedMatches);

            if (response.IsSuccessStatusCode)
            {
                var importResult = await response.Content.ReadFromJsonAsync<AuctionCsvImportResult>();
                if (importResult?.IsSuccess == true)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Successfully imported {importResult.TotalSchools} schools!");
                    CloseConfigureDialog();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Import failed: {string.Join(", ", importResult?.Errors ?? new List<string> { "Unknown error" })}");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Import failed: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Import error: {ex.Message}");
        }
        finally
        {
            isCsvUploading = false;
            StateHasChanged();
        }
    }

    // Primary CSV file upload handler using standard HTML InputFile
    private async Task HandleStandardFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null || selectedAuction == null) return;

        try
        {
            isCsvUploading = true;
            csvUploadMessage = "";
            StateHasChanged();

            // DEBUG: Log standard file properties
            Console.WriteLine($"=== STANDARD FILE UPLOAD DEBUG ===");
            Console.WriteLine($"File Name: {file.Name}");
            Console.WriteLine($"File Size: {file.Size}");
            Console.WriteLine($"File Content Type: {file.ContentType}");

            // Get token
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                csvUploadMessage = "Error: Authentication token missing. Please log in again.";
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Read file using standard approach
            byte[] fileBytes;
            using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024); // 1MB max
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            fileBytes = memoryStream.ToArray();

            Console.WriteLine($"Standard file bytes length: {fileBytes.Length}");
            if (fileBytes.Length > 0)
            {
                var preview = System.Text.Encoding.UTF8.GetString(fileBytes.Take(100).ToArray());
                Console.WriteLine($"Standard content preview: {preview}");
            }

            // First, send to debug endpoint to see exact multipart structure
            using var debugContent = new MultipartFormDataContent();
            var debugFileContent = new ByteArrayContent(fileBytes);
            debugFileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            debugContent.Add(debugFileContent, "csvFile", file.Name ?? "upload.csv");

            Console.WriteLine("=== SENDING TO DEBUG ENDPOINT ===");
            var debugResponse = await Http.PostAsync("/api/debug/multipart", debugContent);
            if (debugResponse.IsSuccessStatusCode)
            {
                var debugResult = await debugResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Debug endpoint result: {debugResult}");
            }

            // Now send to actual endpoint
            using var content = new MultipartFormDataContent();
            var fileContent = new ByteArrayContent(fileBytes);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            content.Add(fileContent, "csvFile", file.Name ?? "upload.csv");

            var response = await Http.PostAsync($"/api/management/auctions/{selectedAuction.AuctionId}/csv/preview", content);

            Console.WriteLine($"Standard upload response: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var previewResult = await response.Content.ReadFromJsonAsync<AuctionCsvPreviewResult>();
                if (previewResult?.IsSuccess == true)
                {
                    schoolMatches = previewResult.SchoolMatches;
                    showSchoolMatching = true;
                    csvUploadMessage = $"Preview ready: {previewResult.TotalSchools} schools found";
                }
                else
                {
                    csvUploadMessage = $"Preview failed: {string.Join(", ", previewResult?.Errors ?? new List<string> { "Unknown error" })}";
                    Console.WriteLine($"Preview result errors: {string.Join(", ", previewResult?.Errors ?? new List<string>())}");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                csvUploadMessage = $"Upload failed ({response.StatusCode}): {errorContent}";
                Console.WriteLine($"Upload error response: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            csvUploadMessage = $"Standard upload error: {ex.Message}";
            Console.WriteLine($"Standard upload exception: {ex}");
        }
        finally
        {
            isCsvUploading = false;
            StateHasChanged();
        }
    }

    // Strategy 3: Test backend connection without file upload
    private async Task TestBackendConnection()
    {
        try
        {
            Console.WriteLine("=== BACKEND CONNECTION TEST ===");
            
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("No management token found");
                csvUploadMessage = "Error: No management token found";
                return;
            }

            // Test simple multipart upload to test endpoint
            using var content = new MultipartFormDataContent();
            var testContent = new StringContent("School,Conference\nTest School,Test Conference");
            testContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            content.Add(testContent, "testFile", "test.csv");

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsync("/api/test/csv-upload", content);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Backend test success: {result}");
                csvUploadMessage = $"Backend test SUCCESS! Response: {result}";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Backend test failed: {response.StatusCode} - {error}");
                csvUploadMessage = $"Backend test FAILED: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Backend test exception: {ex}");
            csvUploadMessage = $"Backend test ERROR: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void CancelSchoolMatching()
    {
        showSchoolMatching = false;
        schoolMatches.Clear();
        csvUploadMessage = "";
        currentFilter = MatchFilter.All;
        StateHasChanged();
    }

    // Match filtering methods
    private void SetMatchFilter(MatchFilter filter)
    {
        currentFilter = filter;
        StateHasChanged();
    }

    private IEnumerable<SchoolMatchPreview> GetFilteredMatches()
    {
        return currentFilter switch
        {
            MatchFilter.Exact => schoolMatches.Where(m => m.MatchType == SchoolMatchType.Exact),
            MatchFilter.Fuzzy => schoolMatches.Where(m => m.MatchType == SchoolMatchType.Fuzzy),
            MatchFilter.New => schoolMatches.Where(m => m.MatchType == SchoolMatchType.NoMatch),
            _ => schoolMatches
        };
    }

    private string GetMatchCardColor(SchoolMatchPreview match)
    {
        return match.MatchType switch
        {
            SchoolMatchType.Exact => "#d4edda",   // Light green
            SchoolMatchType.Fuzzy => "#fff3cd",   // Light yellow
            SchoolMatchType.NoMatch => "#f8d7da", // Light red
            _ => "#ffffff"
        };
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await JSRuntime.InvokeVoidAsync("alert", $"Copied '{text}' to clipboard!");
        }
        catch (Exception)
        {
            // Fallback for browsers that don't support clipboard API
            await JSRuntime.InvokeVoidAsync("alert", $"Join Code: {text}\n\nPlease copy this manually.");
        }
    }

    private void EditAuction(AuctionDto auction)
    {
        selectedAuction = auction;
        selectedAuctionId = auction.AuctionId;
        hideConfigureDialog = false;
        StateHasChanged();
    }

    private async Task DeleteAuction(AuctionDto auction)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the auction '{auction.Name}'? This cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                // Get token from localStorage and set it in the request header
                var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
                if (string.IsNullOrEmpty(token))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                    return;
                }

                // Remove any existing X-Management-Token header and add the current one
                Http.DefaultRequestHeaders.Remove("X-Management-Token");
                Http.DefaultRequestHeaders.Add("X-Management-Token", token);

                var response = await Http.DeleteAsync($"/api/management/auctions/{auction.AuctionId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadAuctions();
                    await JSRuntime.InvokeVoidAsync("alert", "Auction deleted successfully.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete auction.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting auction: {ex.Message}");
            }
        }
    }

    private Appearance GetStatusBadgeAppearance(string status)
    {
        return status?.ToLower() switch
        {
            "draft" => Appearance.Neutral,
            "inprogress" => Appearance.Accent,
            "completed" => Appearance.Lightweight,
            _ => Appearance.Neutral
        };
    }

    // Roster design methods
    private async Task ShowRosterDesign()
    {
        if (selectedAuction == null) return;
        
        try
        {
            isLoadingRosterConfig = true;
            StateHasChanged();
            
            // Load existing roster positions and available positions for this auction
            await LoadRosterPositions();
            await LoadAvailablePositions();
            showRosterDesign = true;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading roster configuration: {ex.Message}");
        }
        finally
        {
            isLoadingRosterConfig = false;
            StateHasChanged();
        }
    }

    private void HideRosterDesign()
    {
        showRosterDesign = false;
        ResetNewPosition();
        StateHasChanged();
    }

    private async Task LoadRosterPositions()
    {
        if (selectedAuction == null) return;
        
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetAsync($"/api/management/auctions/{selectedAuction.AuctionId}/roster-positions");
            if (response.IsSuccessStatusCode)
            {
                var positions = await response.Content.ReadFromJsonAsync<List<RosterPositionDto>>();
                rosterPositions = positions ?? new List<RosterPositionDto>();
            }
            else
            {
                rosterPositions = new List<RosterPositionDto>();
            }
        }
        catch (Exception ex)
        {
            rosterPositions = new List<RosterPositionDto>();
            Console.WriteLine($"Error loading roster positions: {ex.Message}");
        }
    }

    private async Task AddRosterPosition()
    {
        // Validate position name (either from dropdown or custom input)
        var actualPositionName = newPosition.PositionName == "Custom" 
            ? newPosition.CustomPositionName.Trim() 
            : newPosition.PositionName.Trim();
            
        if (selectedAuction == null || string.IsNullOrWhiteSpace(actualPositionName) || newPosition.SlotsPerTeam <= 0) return;
        
        try
        {
            isAddingPosition = true;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Determine the final position name to use
            var finalPositionName = newPosition.PositionName == "Custom" 
                ? newPosition.CustomPositionName.Trim() 
                : newPosition.PositionName.Trim();

            var request = new CreateRosterPositionRequest
            {
                AuctionId = selectedAuction.AuctionId,
                PositionName = finalPositionName,
                SlotsPerTeam = newPosition.SlotsPerTeam,
                ColorCode = newPosition.ColorCode,
                IsFlexPosition = newPosition.IsFlexPosition,
                DisplayOrder = rosterPositions.Count + 1
            };

            var response = await Http.PostAsJsonAsync("/api/management/roster-positions", request);
            if (response.IsSuccessStatusCode)
            {
                await LoadRosterPositions();
                ResetNewPosition();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error adding roster position: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding roster position: {ex.Message}");
        }
        finally
        {
            isAddingPosition = false;
            StateHasChanged();
        }
    }

    private async Task RemoveRosterPosition(RosterPositionDto position)
    {
        if (selectedAuction == null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the '{position.PositionName}' position?");
        if (!confirmed) return;

        try
        {
            deletingPositionId = position.RosterPositionId;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.DeleteAsync($"/api/management/roster-positions/{position.RosterPositionId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadRosterPositions();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error removing roster position: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error removing roster position: {ex.Message}");
        }
        finally
        {
            deletingPositionId = null;
            StateHasChanged();
        }
    }

    private async Task MovePositionUp(RosterPositionDto position)
    {
        await ReorderPosition(position, -1);
    }

    private async Task MovePositionDown(RosterPositionDto position)
    {
        await ReorderPosition(position, 1);
    }

    private async Task ReorderPosition(RosterPositionDto position, int direction)
    {
        if (selectedAuction == null) return;
        
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var request = new ReorderPositionRequest
            {
                RosterPositionId = position.RosterPositionId,
                Direction = direction
            };

            var response = await Http.PostAsJsonAsync($"/api/management/roster-positions/{position.RosterPositionId}/reorder", request);
            if (response.IsSuccessStatusCode)
            {
                await LoadRosterPositions();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error reordering positions: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error reordering positions: {ex.Message}");
        }
    }

    private void ResetNewPosition()
    {
        newPosition = new NewRosterPosition
        {
            ColorCode = "#0078d4",
            SlotsPerTeam = 1
        };
    }

    private async Task LoadAvailablePositions()
    {
        if (selectedAuction == null) return;
        
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                availablePositions = new List<string>();
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetAsync($"/api/management/auctions/{selectedAuction.AuctionId}/available-positions");
            if (response.IsSuccessStatusCode)
            {
                var positions = await response.Content.ReadFromJsonAsync<List<string>>();
                availablePositions = positions ?? new List<string>();
            }
            else
            {
                availablePositions = new List<string>();
            }
        }
        catch (Exception ex)
        {
            availablePositions = new List<string>();
            Console.WriteLine($"Error loading available positions: {ex.Message}");
        }
    }

    private List<string> GetPositionOptions()
    {
        var options = new List<string>();
        
        // Add LeagifyPosition values from imported schools
        options.AddRange(availablePositions);
        
        // Add common flex positions
        if (!options.Contains("Flex"))
            options.Add("Flex");
            
        // Add custom option as last resort
        options.Add("Custom");
        
        return options;
    }

    private bool IsAddPositionDisabled()
    {
        if (newPosition.SlotsPerTeam <= 0) return true;
        
        if (string.IsNullOrWhiteSpace(newPosition.PositionName)) return true;
        
        if (newPosition.PositionName == "Custom" && string.IsNullOrWhiteSpace(newPosition.CustomPositionName))
            return true;
            
        return false;
    }

    // DTOs
    public class AuctionDto
    {
        public int AuctionId { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string Status { get; set; } = "";
        public string JoinCode { get; set; } = "";
        public string MasterCode { get; set; } = "";
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
    }

    public class CreateAuctionRequest
    {
        [Required]
        public string Name { get; set; } = "";
        public string? Description { get; set; }
    }

    // CSV Import DTOs (matching the service DTOs)
    public class AuctionCsvPreviewResult
    {
        public int AuctionId { get; set; }
        public bool IsSuccess { get; set; }
        public List<string> Errors { get; set; } = new();
        public List<SchoolMatchPreview> SchoolMatches { get; set; } = new();
        public int TotalSchools { get; set; }
        public int ExactMatches { get; set; }
        public int FuzzyMatches { get; set; }
        public int NoMatches { get; set; }
    }

    public class AuctionCsvImportResult
    {
        public int AuctionId { get; set; }
        public bool IsSuccess { get; set; }
        public List<string> Errors { get; set; } = new();
        public int TotalSchools { get; set; }
    }

    public class SchoolMatchPreview
    {
        public SchoolImportData CsvData { get; set; } = new();
        public int ImportOrder { get; set; }
        public SchoolMatchType MatchType { get; set; }
        public SchoolDto? MatchedSchool { get; set; }
        public double Confidence { get; set; }
        public List<SchoolDto> AlternativeMatches { get; set; } = new();
    }

    public class ConfirmedSchoolMatch
    {
        public int SchoolId { get; set; }
        public SchoolImportData CsvData { get; set; } = new();
        public int ImportOrder { get; set; }
    }

    public class SchoolImportData
    {
        public string Name { get; set; } = "";
        public string Conference { get; set; } = "";
        public string LeagifyPosition { get; set; } = "";
        public decimal ProjectedPoints { get; set; }
        public int NumberOfProspects { get; set; }
        public decimal? SuggestedAuctionValue { get; set; }
        public decimal ProjectedPointsAboveAverage { get; set; }
        public decimal ProjectedPointsAboveReplacement { get; set; }
        public decimal AveragePointsForPosition { get; set; }
        public decimal ReplacementValueAverageForPosition { get; set; }
        public string? SchoolURL { get; set; }
        public string? LogoFileName { get; set; }
    }

    public class SchoolDto
    {
        public int SchoolId { get; set; }
        public string Name { get; set; } = "";
        public string LogoFileName { get; set; } = "";
    }

    public enum SchoolMatchType
    {
        Exact,
        Fuzzy,
        NoMatch
    }

    public class RosterPositionDto
    {
        public int RosterPositionId { get; set; }
        public int AuctionId { get; set; }
        public string PositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; }
        public string ColorCode { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsFlexPosition { get; set; }
    }

    public class NewRosterPosition
    {
        public string PositionName { get; set; } = string.Empty;
        public string CustomPositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; } = 1;
        public string ColorCode { get; set; } = "#0078d4";
        public bool IsFlexPosition { get; set; } = false;
    }

    public class CreateRosterPositionRequest
    {
        public int AuctionId { get; set; }
        public string PositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; }
        public string ColorCode { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsFlexPosition { get; set; }
    }

    public class ReorderPositionRequest
    {
        public int RosterPositionId { get; set; }
        public int Direction { get; set; }
    }
}

<style>
    .auction-container {
        padding: 24px;
        max-width: 1200px;
    }

    .header-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }

    .loading-container {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 40px;
        justify-content: center;
    }

    .auctions-grid {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .empty-state {
        text-align: center;
        padding: 60px 40px;
        color: var(--neutral-foreground-rest);
    }

    .empty-state h3 {
        margin: 16px 0 8px 0;
        font-weight: 600;
    }

    .empty-state p {
        margin-bottom: 24px;
        opacity: 0.8;
    }

    .join-code, .master-code {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .join-code code {
        background: var(--accent-fill-rest);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-family: monospace;
        font-weight: 600;
    }

    .master-code-text {
        background: var(--neutral-fill-stealth-rest);
        color: var(--neutral-foreground-rest);
        padding: 4px 8px;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
    }

    fluent-data-grid {
        border: none;
    }
</style>