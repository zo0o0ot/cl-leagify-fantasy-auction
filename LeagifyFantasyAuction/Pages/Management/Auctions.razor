@page "/management/auctions"
@layout ManagementLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Auction Management</PageTitle>

<div class="auction-container">
    <div class="header-row">
        <h2>Auction Management</h2>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Add())" OnClick="OpenCreateAuctionDialog">
            Create Auction
        </FluentButton>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <FluentProgressRing />
            <span>Loading auctions...</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <FluentMessageBar Intent="MessageIntent.Error">
            <strong>Error:</strong> @errorMessage
        </FluentMessageBar>
    }
    else
    {
        <div class="auctions-grid">
            @if (auctions.Any())
            {
                <FluentDataGrid Items="@auctions.AsQueryable()" Pagination="@pagination" GridTemplateColumns="1fr 150px 120px 150px 200px 120px">
                    <PropertyColumn Property="@(a => a.Name)" Title="Auction Name" Sortable="true" />
                    <TemplateColumn Title="Status" Sortable="true">
                        <ChildContent Context="auction">
                            <FluentBadge Appearance="@GetStatusBadgeAppearance(auction.Status)">
                                @auction.Status
                            </FluentBadge>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Property="@(a => a.CreatedDate.ToString("MM/dd/yyyy"))" Title="Created" Sortable="true" />
                    <TemplateColumn Title="Join Code">
                        <ChildContent Context="auction">
                            <div class="join-code">
                                <code>@auction.JoinCode</code>
                                <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Copy())" 
                                              OnClick="@(() => CopyToClipboard(auction.JoinCode))" Title="Copy join code" />
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn Title="Master Code">
                        <ChildContent Context="auction">
                            <div class="master-code">
                                <code class="master-code-text">@auction.MasterCode</code>
                                <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Copy())" 
                                              OnClick="@(() => CopyToClipboard(auction.MasterCode))" Title="Copy master code" />
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions" Align="@Align.Center">
                        <ChildContent Context="auction">
                            <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Settings())" 
                                          OnClick="@(() => EditAuction(auction))" Title="Configure auction" />
                            <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size16.Delete())" 
                                          OnClick="@(() => DeleteAuction(auction))" Title="Delete auction" />
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
                
                <FluentPaginator State="@pagination" />
            }
            else
            {
                <div class="empty-state">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Database())" />
                    <h3>No Auctions Yet</h3>
                    <p>Create your first auction to get started with the draft system.</p>
                    <FluentButton Appearance="Appearance.Accent" OnClick="OpenCreateAuctionDialog">
                        Create First Auction
                    </FluentButton>
                </div>
            }
        </div>
    }
</div>

<!-- Create Auction Dialog -->
<FluentDialog @ref="createDialog" @bind-Hidden="@hideCreateDialog">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" />
            <FluentLabel Typo="Typography.PaneHeader">Create New Auction</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
            <FluentTextField @bind-Value="newAuction.Name" Label="Auction Name" Required="true" 
                            Placeholder="e.g., 2025 NFL Draft League" />
            <FluentTextArea @bind-Value="newAuction.Description" Label="Description (Optional)" 
                           Placeholder="Brief description of the auction rules or league" />
            
            <FluentMessageBar Intent="MessageIntent.Info">
                <strong>ℹ️ Note:</strong> After creating the auction, you'll be able to upload CSV data and configure roster positions.
            </FluentMessageBar>
        </FluentStack>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="CancelCreateAuction">Cancel</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="CreateAuction" Loading="@isCreating">
            @if (isCreating)
            {
                <text>Creating...</text>
            }
            else
            {
                <text>Create Auction</text>
            }
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

<!-- Configure Auction Dialog -->
<FluentDialog @ref="configureDialog" @bind-Hidden="@hideConfigureDialog" Style="width: 800px; max-width: 90vw;">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Settings())" />
            <FluentLabel Typo="Typography.PaneHeader">Configure Auction: @(selectedAuction?.Name ?? "")</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        @if (selectedAuction != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
                
                <!-- CSV Import Section -->
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                        <FluentLabel Typo="Typography.Subject">School Data Import</FluentLabel>
                        <FluentLabel>Upload a CSV file containing school data for this auction.</FluentLabel>
                        
                        @if (!showSchoolMatching)
                        {
                            <FluentInputFile @ref="csvFileInput" 
                                           Accept=".csv"
                                           OnCompleted="@HandleCsvUpload" 
                                           Style="width: 100%;" />
                            
                            @if (isCsvUploading)
                            {
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                                    <FluentProgressRing Style="width: 20px; height: 20px;" />
                                    <FluentLabel>Processing CSV...</FluentLabel>
                                </FluentStack>
                            }
                            
                            @if (!string.IsNullOrEmpty(csvUploadMessage))
                            {
                                <FluentMessageBar Intent="@(csvUploadMessage.Contains("Error") ? MessageIntent.Error : MessageIntent.Success)">
                                    @csvUploadMessage
                                </FluentMessageBar>
                            }
                        }
                        else
                        {
                            <!-- School Matching Interface -->
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                                <FluentLabel Typo="Typography.Body">Review and confirm school matches:</FluentLabel>
                                
                                <div style="max-height: 300px; overflow-y: auto;">
                                    @foreach (var match in schoolMatches)
                                    {
                                        <FluentCard Style="margin-bottom: 8px; padding: 12px;">
                                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                                <FluentStack Orientation="Orientation.Vertical" Style="flex: 1;">
                                                    <FluentLabel Weight="FontWeight.Bold">@match.CsvData.Name</FluentLabel>
                                                    <FluentLabel Style="font-size: 12px;">@match.CsvData.Conference - @match.CsvData.LeagifyPosition</FluentLabel>
                                                </FluentStack>
                                                
                                                @if (match.MatchType == SchoolMatchType.Exact)
                                                {
                                                    <FluentBadge Appearance="Appearance.Accent">Exact Match</FluentBadge>
                                                }
                                                else if (match.MatchType == SchoolMatchType.Fuzzy)
                                                {
                                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                                                        <FluentBadge Appearance="Appearance.Neutral">Fuzzy Match (@(Math.Round(match.Confidence * 100))%)</FluentBadge>
                                                        <FluentLabel Style="font-size: 12px;">→ @match.MatchedSchool?.Name</FluentLabel>
                                                    </FluentStack>
                                                }
                                                else
                                                {
                                                    <FluentBadge Appearance="Appearance.Stealth">No Match - Will Create New</FluentBadge>
                                                }
                                            </FluentStack>
                                        </FluentCard>
                                    }
                                </div>
                                
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12">
                                    <FluentButton Appearance="Appearance.Accent" OnClick="@ConfirmCsvImport">
                                        Confirm Import (@schoolMatches.Count schools)
                                    </FluentButton>
                                    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelSchoolMatching">
                                        Cancel
                                    </FluentButton>
                                </FluentStack>
                            </FluentStack>
                        }
                    </FluentStack>
                </FluentCard>

                <!-- Future configuration sections would go here -->
                <FluentMessageBar Intent="MessageIntent.Info">
                    <strong>Coming Soon:</strong> Roster position configuration, team settings, and more.
                </FluentMessageBar>
                
            </FluentStack>
        }
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CloseConfigureDialog">Close</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private List<AuctionDto> auctions = new();
    private bool isLoading = true;
    private bool isCreating = false;
    private string errorMessage = "";
    private PaginationState pagination = new() { ItemsPerPage = 10 };

    // Dialog state
    private FluentDialog? createDialog;
    private bool hideCreateDialog = true;
    private CreateAuctionRequest newAuction = new();

    // Configuration dialog state
    private FluentDialog? configureDialog;
    private bool hideConfigureDialog = true;
    private AuctionDto? selectedAuction;
    private int selectedAuctionId;

    // CSV import state
    private FluentInputFile? csvFileInput;
    private bool isCsvUploading = false;
    private string csvUploadMessage = "";
    private List<SchoolMatchPreview> schoolMatches = new();
    private bool showSchoolMatching = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuctions();
    }

    private async Task LoadAuctions()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            // Get token from localStorage and set it in the request header
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authentication token missing. Please log in again.";
                return;
            }

            // Remove any existing X-Management-Token header and add the current one
            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetFromJsonAsync<List<AuctionDto>>("/api/management/auctions");
            auctions = response ?? new List<AuctionDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load auctions: {ex.Message}";
            Console.WriteLine($"Error loading auctions: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenCreateAuctionDialog()
    {
        newAuction = new CreateAuctionRequest();
        hideCreateDialog = false;
        StateHasChanged();
    }

    private void CancelCreateAuction()
    {
        hideCreateDialog = true;
        newAuction = new CreateAuctionRequest();
        StateHasChanged();
    }

    private async Task CreateAuction()
    {
        if (string.IsNullOrWhiteSpace(newAuction.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter an auction name.");
            return;
        }

        try
        {
            isCreating = true;
            StateHasChanged();

            // Get token from localStorage and set it in the request header
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            // Remove any existing X-Management-Token header and add the current one
            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsJsonAsync("/api/management/auctions", newAuction);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadAuctions(); // Refresh the list
                hideCreateDialog = true;
                newAuction = new CreateAuctionRequest();
                await JSRuntime.InvokeVoidAsync("alert", "Auction created successfully!");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to create auction: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating auction: {ex.Message}");
            Console.WriteLine($"Error creating auction: {ex}");
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void CloseConfigureDialog()
    {
        hideConfigureDialog = true;
        selectedAuction = null;
        showSchoolMatching = false;
        schoolMatches.Clear();
        csvUploadMessage = "";
        StateHasChanged();
    }

    private async Task HandleCsvUpload(IEnumerable<FluentInputFileEventArgs> files)
    {
        var file = files.FirstOrDefault();
        if (file == null || selectedAuction == null) return;

        try
        {
            isCsvUploading = true;
            csvUploadMessage = "";
            StateHasChanged();

            // Get token from localStorage and set it in the request header
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                csvUploadMessage = "Error: Authentication token missing. Please log in again.";
                return;
            }

            // Remove any existing X-Management-Token header and add the current one
            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Upload CSV for preview
            // Read file content directly from Stream property
            byte[] fileBytes;
            
            if (file.Stream == null)
            {
                csvUploadMessage = "Error: File stream is null.";
                return;
            }
            
            using (var fileStream = file.Stream)
            {
                // Reset position to start if possible
                if (fileStream.CanSeek)
                {
                    fileStream.Position = 0;
                }
                
                using var memoryStream = new MemoryStream();
                await fileStream.CopyToAsync(memoryStream);
                fileBytes = memoryStream.ToArray();
            }
            
            Console.WriteLine($"File upload: {file.Name}, Size: {fileBytes.Length} bytes, Content preview: {System.Text.Encoding.UTF8.GetString(fileBytes.Take(100).ToArray())}");
            
            using var content = new MultipartFormDataContent();
            var fileContent = new ByteArrayContent(fileBytes);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            content.Add(fileContent, "csvFile", file.Name ?? "upload.csv");

            var response = await Http.PostAsync($"/api/management/auctions/{selectedAuction.AuctionId}/csv/preview", content);

            if (response.IsSuccessStatusCode)
            {
                var previewResult = await response.Content.ReadFromJsonAsync<AuctionCsvPreviewResult>();
                if (previewResult?.IsSuccess == true)
                {
                    schoolMatches = previewResult.SchoolMatches;
                    showSchoolMatching = true;
                    csvUploadMessage = $"Preview ready: {previewResult.TotalSchools} schools found";
                }
                else
                {
                    csvUploadMessage = $"Error: {string.Join(", ", previewResult?.Errors ?? new List<string> { "Unknown error" })}";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                csvUploadMessage = $"Error: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            csvUploadMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isCsvUploading = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmCsvImport()
    {
        if (selectedAuction == null || !schoolMatches.Any()) return;

        try
        {
            isCsvUploading = true;
            StateHasChanged();

            // Prepare confirmed matches
            var confirmedMatches = schoolMatches.Select(m => new ConfirmedSchoolMatch
            {
                SchoolId = m.MatchedSchool?.SchoolId ?? 0, // Will create new school if 0
                CsvData = m.CsvData,
                ImportOrder = m.ImportOrder
            }).ToList();

            // Get token and send confirmation
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsJsonAsync($"/api/management/auctions/{selectedAuction.AuctionId}/csv/confirm", confirmedMatches);

            if (response.IsSuccessStatusCode)
            {
                var importResult = await response.Content.ReadFromJsonAsync<AuctionCsvImportResult>();
                if (importResult?.IsSuccess == true)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Successfully imported {importResult.TotalSchools} schools!");
                    CloseConfigureDialog();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Import failed: {string.Join(", ", importResult?.Errors ?? new List<string> { "Unknown error" })}");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Import failed: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Import error: {ex.Message}");
        }
        finally
        {
            isCsvUploading = false;
            StateHasChanged();
        }
    }

    private void CancelSchoolMatching()
    {
        showSchoolMatching = false;
        schoolMatches.Clear();
        csvUploadMessage = "";
        StateHasChanged();
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await JSRuntime.InvokeVoidAsync("alert", $"Copied '{text}' to clipboard!");
        }
        catch (Exception)
        {
            // Fallback for browsers that don't support clipboard API
            await JSRuntime.InvokeVoidAsync("alert", $"Join Code: {text}\n\nPlease copy this manually.");
        }
    }

    private void EditAuction(AuctionDto auction)
    {
        selectedAuction = auction;
        selectedAuctionId = auction.AuctionId;
        hideConfigureDialog = false;
        StateHasChanged();
    }

    private async Task DeleteAuction(AuctionDto auction)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the auction '{auction.Name}'? This cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                // Get token from localStorage and set it in the request header
                var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
                if (string.IsNullOrEmpty(token))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Authentication token missing. Please log in again.");
                    return;
                }

                // Remove any existing X-Management-Token header and add the current one
                Http.DefaultRequestHeaders.Remove("X-Management-Token");
                Http.DefaultRequestHeaders.Add("X-Management-Token", token);

                var response = await Http.DeleteAsync($"/api/management/auctions/{auction.AuctionId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadAuctions();
                    await JSRuntime.InvokeVoidAsync("alert", "Auction deleted successfully.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete auction.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting auction: {ex.Message}");
            }
        }
    }

    private Appearance GetStatusBadgeAppearance(string status)
    {
        return status?.ToLower() switch
        {
            "draft" => Appearance.Neutral,
            "inprogress" => Appearance.Accent,
            "completed" => Appearance.Lightweight,
            _ => Appearance.Neutral
        };
    }

    // DTOs
    public class AuctionDto
    {
        public int AuctionId { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string Status { get; set; } = "";
        public string JoinCode { get; set; } = "";
        public string MasterCode { get; set; } = "";
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
    }

    public class CreateAuctionRequest
    {
        [Required]
        public string Name { get; set; } = "";
        public string? Description { get; set; }
    }

    // CSV Import DTOs (matching the service DTOs)
    public class AuctionCsvPreviewResult
    {
        public int AuctionId { get; set; }
        public bool IsSuccess { get; set; }
        public List<string> Errors { get; set; } = new();
        public List<SchoolMatchPreview> SchoolMatches { get; set; } = new();
        public int TotalSchools { get; set; }
        public int ExactMatches { get; set; }
        public int FuzzyMatches { get; set; }
        public int NoMatches { get; set; }
    }

    public class AuctionCsvImportResult
    {
        public int AuctionId { get; set; }
        public bool IsSuccess { get; set; }
        public List<string> Errors { get; set; } = new();
        public int TotalSchools { get; set; }
    }

    public class SchoolMatchPreview
    {
        public SchoolImportData CsvData { get; set; } = new();
        public int ImportOrder { get; set; }
        public SchoolMatchType MatchType { get; set; }
        public SchoolDto? MatchedSchool { get; set; }
        public double Confidence { get; set; }
        public List<SchoolDto> AlternativeMatches { get; set; } = new();
    }

    public class ConfirmedSchoolMatch
    {
        public int SchoolId { get; set; }
        public SchoolImportData CsvData { get; set; } = new();
        public int ImportOrder { get; set; }
    }

    public class SchoolImportData
    {
        public string Name { get; set; } = "";
        public string Conference { get; set; } = "";
        public string LeagifyPosition { get; set; } = "";
        public decimal ProjectedPoints { get; set; }
        public int NumberOfProspects { get; set; }
        public decimal? SuggestedAuctionValue { get; set; }
        public decimal ProjectedPointsAboveAverage { get; set; }
        public decimal ProjectedPointsAboveReplacement { get; set; }
        public decimal AveragePointsForPosition { get; set; }
        public decimal ReplacementValueAverageForPosition { get; set; }
        public string? SchoolURL { get; set; }
        public string? LogoFileName { get; set; }
    }

    public class SchoolDto
    {
        public int SchoolId { get; set; }
        public string Name { get; set; } = "";
        public string LogoFileName { get; set; } = "";
    }

    public enum SchoolMatchType
    {
        Exact,
        Fuzzy,
        NoMatch
    }
}

<style>
    .auction-container {
        padding: 24px;
        max-width: 1200px;
    }

    .header-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }

    .loading-container {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 40px;
        justify-content: center;
    }

    .auctions-grid {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .empty-state {
        text-align: center;
        padding: 60px 40px;
        color: var(--neutral-foreground-rest);
    }

    .empty-state h3 {
        margin: 16px 0 8px 0;
        font-weight: 600;
    }

    .empty-state p {
        margin-bottom: 24px;
        opacity: 0.8;
    }

    .join-code, .master-code {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .join-code code {
        background: var(--accent-fill-rest);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-family: monospace;
        font-weight: 600;
    }

    .master-code-text {
        background: var(--neutral-fill-stealth-rest);
        color: var(--neutral-foreground-rest);
        padding: 4px 8px;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
    }

    fluent-data-grid {
        border: none;
    }
</style>