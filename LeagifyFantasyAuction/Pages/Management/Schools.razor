@page "/management/schools"
@layout ManagementLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>School Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
        <FluentLabel Typo="Typography.H2">School Management</FluentLabel>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
            <FluentButton Appearance="Appearance.Accent" 
                         IconStart="@(new Icons.Regular.Size20.Add())"
                         Disabled="true">
                Import CSV (Coming Soon)
            </FluentButton>
            <FluentButton Appearance="Appearance.Outline" 
                         IconStart="@(new Icons.Regular.Size20.Add())"
                         OnClick="OpenAddSchoolDialog">
                Add School
            </FluentButton>
        </FluentStack>
    </FluentStack>

    <FluentCard>
        @if (schools == null)
        {
            <FluentProgressRing>Loading schools...</FluentProgressRing>
        }
        else if (schools.Count == 0)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="15">
                <div class="alert alert-info" role="alert">
                    No schools found. You can either add schools manually or seed all schools from the draft template.
                </div>
                <FluentButton Appearance="Appearance.Accent" 
                             IconStart="@(new Icons.Regular.Size20.Database())"
                             OnClick="SeedSampleSchoolsAsync"
                             Loading="@seedingSchools">
                    Seed All 143 Schools from Template
                </FluentButton>
                
                @if (!string.IsNullOrEmpty(seedingMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @seedingMessage
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </FluentStack>
        }
        else
        {
            <FluentDataGrid Items="@schools.AsQueryable()" ResizableColumns="true" Pagination="@pagination">
                <PropertyColumn Property="@(s => s.SchoolId)" Title="ID" Sortable="true" Align="Align.Start" />
                <PropertyColumn Property="@(s => s.Name)" Title="Name" Sortable="true" />
                <TemplateColumn Title="Logo" Align="Align.Center">
                    @if (!string.IsNullOrEmpty(context.LogoURL))
                    {
                        <img src="@context.LogoURL" alt="@context.Name" style="width: 32px; height: 32px;" 
                             onerror="this.style.display='none'" />
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size20.Building())" Color="Color.Neutral" />
                    }
                </TemplateColumn>
                <PropertyColumn Property="@(s => s.AuctionCount)" Title="Used in Auctions" Sortable="true" Align="Align.Center" />
                <PropertyColumn Property="@(s => s.CreatedDate)" Title="Created" Format="MMM d, yyyy" Sortable="true" />
                <TemplateColumn Title="Actions" Align="Align.Center">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                        <FluentButton Appearance="Appearance.Lightweight" 
                                     IconStart="@(new Icons.Regular.Size16.Edit())"
                                     OnClick="() => OpenEditSchoolDialog(context)">
                            Edit
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Lightweight" 
                                     IconStart="@(new Icons.Regular.Size16.Delete())"
                                     OnClick="() => DeleteSchoolAsync(context)"
                                     Disabled="@(context.AuctionCount > 0)">
                            Delete
                        </FluentButton>
                    </FluentStack>
                </TemplateColumn>
            </FluentDataGrid>
            
            <FluentPaginator State="@pagination" />
        }
    </FluentCard>
</FluentStack>

<FluentDialog @ref="schoolDialog" Modal="true" TrapFocus="true" AriaLabel="School Form">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Building())" />
            <FluentLabel Typo="Typography.PaneHeader">
                @(editingSchool == null ? "Add School" : "Edit School")
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        <EditForm Model="@schoolForm" OnValidSubmit="@SaveSchoolAsync">
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentStack Orientation="Orientation.Vertical" VerticalGap="15">
                <FluentTextField @bind-Value="schoolForm.Name" 
                               Label="School Name" 
                               Required="true"
                               Style="width: 100%;" />
                
                <div class="alert alert-info" role="alert" style="font-size: 0.9em;">
                    <strong>Images:</strong> School logos can be uploaded after creating the school entry. SVG format preferred.
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </FluentStack>
        </EditForm>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" 
                     Loading="@savingSchool"
                     OnClick="@(() => schoolForm?.OnSubmit())">
            @(editingSchool == null ? "Add School" : "Update School")
        </FluentButton>
        <FluentButton Appearance="Appearance.Neutral" 
                     OnClick="@(() => schoolDialog?.Hide())">
            Cancel
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>


@code {
    private List<SchoolDto>? schools;
    private PaginationState pagination = new() { ItemsPerPage = 20 };
    private FluentDialog? schoolDialog;
    private SchoolFormModel schoolForm = new();
    private SchoolDto? editingSchool;
    private bool savingSchool;
    private bool seedingSchools;
    private string? errorMessage;
    private string? seedingMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolsAsync();
    }

    private async Task LoadSchoolsAsync()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            schools = await Http.GetFromJsonAsync<List<SchoolDto>>("/api/management/schools") ?? new List<SchoolDto>();
        }
        catch (Exception ex)
        {
            schools = new List<SchoolDto>();
            Console.WriteLine($"Error loading schools: {ex.Message}");
        }
    }

    private void OpenAddSchoolDialog()
    {
        editingSchool = null;
        schoolForm = new SchoolFormModel();
        errorMessage = null;
        schoolDialog?.Show();
    }

    private void OpenEditSchoolDialog(SchoolDto school)
    {
        editingSchool = school;
        schoolForm = new SchoolFormModel
        {
            Name = school.Name,
            LogoURL = school.LogoURL,
            LogoFileName = school.LogoFileName
        };
        errorMessage = null;
        schoolDialog?.Show();
    }

    private async Task SaveSchoolAsync()
    {
        savingSchool = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            if (editingSchool == null)
            {
                // Add new school
                var response = await Http.PostAsJsonAsync("/api/management/schools", schoolForm);
                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolsAsync();
                    schoolDialog!.Hide();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to add school: {error}";
                }
            }
            else
            {
                // Update existing school
                var response = await Http.PutAsJsonAsync($"/api/management/schools/{editingSchool.SchoolId}", schoolForm);
                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolsAsync();
                    schoolDialog!.Hide();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to update school: {error}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving school: {ex.Message}";
        }
        finally
        {
            savingSchool = false;
            StateHasChanged();
        }
    }

    private async Task DeleteSchoolAsync(SchoolDto school)
    {
        if (school.AuctionCount > 0)
        {
            return; // Button should be disabled, but double-check
        }

        // TODO: Add confirmation dialog
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await Http.DeleteAsync($"/api/management/schools/{school.SchoolId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadSchoolsAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting school: {ex.Message}");
        }
    }


    private async Task SeedSampleSchoolsAsync()
    {
        seedingSchools = true;
        errorMessage = null;
        seedingMessage = null;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authentication token not found. Please refresh and try again.";
                return;
            }
            
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            seedingMessage = "Starting to seed schools...";

            // All schools from SampleDraftTemplate.csv - images will be uploaded separately
            var sampleSchools = new[]
            {
                new { Name = "Ohio State" },
                new { Name = "Texas" },
                new { Name = "Georgia" },
                new { Name = "Michigan" },
                new { Name = "Ole Miss" },
                new { Name = "Oregon" },
                new { Name = "LSU" },
                new { Name = "Penn State" },
                new { Name = "Alabama" },
                new { Name = "South Carolina" },
                new { Name = "Miami (FL)" },
                new { Name = "Colorado" },
                new { Name = "Notre Dame" },
                new { Name = "Missouri" },
                new { Name = "Tennessee" },
                new { Name = "Texas A&M" },
                new { Name = "Arizona" },
                new { Name = "Iowa" },
                new { Name = "Iowa State" },
                new { Name = "Kentucky" },
                new { Name = "North Carolina" },
                new { Name = "Florida State" },
                new { Name = "Minnesota" },
                new { Name = "Boston College" },
                new { Name = "Boise State" },
                new { Name = "Virginia Tech" },
                new { Name = "Florida" },
                new { Name = "UCLA" },
                new { Name = "Arkansas" },
                new { Name = "Louisville" },
                new { Name = "Syracuse" },
                new { Name = "Kansas" },
                new { Name = "Marshall" },
                new { Name = "Maryland" },
                new { Name = "TCU" },
                new { Name = "North Dakota State" },
                new { Name = "Nebraska" },
                new { Name = "Kansas State" },
                new { Name = "Clemson" },
                new { Name = "Toledo" },
                new { Name = "Rutgers" },
                new { Name = "UCF" },
                new { Name = "West Virginia" },
                new { Name = "Oklahoma State" },
                new { Name = "Stanford" },
                new { Name = "Oklahoma" },
                new { Name = "California" },
                new { Name = "Indiana" },
                new { Name = "Texas Tech" },
                new { Name = "East Carolina" },
                new { Name = "Auburn" },
                new { Name = "Arizona State" },
                new { Name = "USC" },
                new { Name = "Purdue" },
                new { Name = "NC State" },
                new { Name = "SMU" },
                new { Name = "Utah" },
                new { Name = "Virginia" },
                new { Name = "Georgia Tech" },
                new { Name = "Wisconsin" },
                new { Name = "Colorado State" },
                new { Name = "Bowling Green" },
                new { Name = "BYU" },
                new { Name = "Utah State" },
                new { Name = "Cincinnati" },
                new { Name = "Washington State" },
                new { Name = "William & Mary" },
                new { Name = "Tulane" },
                new { Name = "Illinois" },
                new { Name = "UTSA" },
                new { Name = "Memphis" },
                new { Name = "UConn" },
                new { Name = "Central Arkansas" },
                new { Name = "Oregon State" },
                new { Name = "Sacramento State" },
                new { Name = "Pitt" },
                new { Name = "UNLV" },
                new { Name = "Western Michigan" },
                new { Name = "Jacksonville State" },
                new { Name = "Fresno State" },
                new { Name = "Delaware" },
                new { Name = "San Jose State" },
                new { Name = "Baylor" },
                new { Name = "Michigan State" },
                new { Name = "Washington" },
                new { Name = "Western Kentucky" },
                new { Name = "Eastern Washington" },
                new { Name = "Alabama A&M" },
                new { Name = "Texas State" },
                new { Name = "Arkansas State" },
                new { Name = "North Texas" },
                new { Name = "Miami (OH)" },
                new { Name = "Montana State" },
                new { Name = "Vanderbilt" },
                new { Name = "Navy" },
                new { Name = "Wake Forest" },
                new { Name = "Florida A&M" },
                new { Name = "Houston" },
                new { Name = "Northern Illinois" },
                new { Name = "Mississippi State" },
                new { Name = "Nevada" },
                new { Name = "Buffalo" },
                new { Name = "South Carolina State" },
                new { Name = "Jackson State" },
                new { Name = "Middlebury" },
                new { Name = "Cal Poly" },
                new { Name = "South Alabama" },
                new { Name = "Lindenwood" },
                new { Name = "Southern Arkansas" },
                new { Name = "Villanova" },
                new { Name = "Wilfrid Laurier" },
                new { Name = "Towson" },
                new { Name = "Illinois State" },
                new { Name = "Northern Iowa" },
                new { Name = "Minnesota Duluth" },
                new { Name = "Howard" },
                new { Name = "Tulsa" },
                new { Name = "UC Davis" },
                new { Name = "Morgan State" },
                new { Name = "South Dakota State" },
                new { Name = "Liberty" },
                new { Name = "Wyoming" },
                new { Name = "South Florida" },
                new { Name = "Louisiana-Monroe" },
                new { Name = "Lenoir?Rhyne" },
                new { Name = "Georgia State" },
                new { Name = "Florida International" },
                new { Name = "Coastal Carolina" },
                new { Name = "Northwestern" },
                new { Name = "Georgia Southern" },
                new { Name = "Central Michigan" },
                new { Name = "Duke" },
                new { Name = "North Carolina A&T" },
                new { Name = "Massachusetts" },
                new { Name = "Hawaii" },
                new { Name = "Holy Cross" },
                new { Name = "Louisiana Tech" },
                new { Name = "Charlotte" },
                new { Name = "James Madison" },
                new { Name = "New Mexico" },
                new { Name = "Abilene Christian" },
                new { Name = "Eastern Kentucky" }
            };

            int created = 0;
            int skipped = 0;
            int errors = 0;
            
            for (int i = 0; i < sampleSchools.Length; i++)
            {
                var school = sampleSchools[i];
                try
                {
                    // Update progress every 10 schools
                    if (i % 10 == 0)
                    {
                        seedingMessage = $"Seeding school {i + 1} of {sampleSchools.Length}: {school.Name}";
                        StateHasChanged();
                    }
                    
                    var createDto = new
                    {
                        Name = school.Name,
                        LogoURL = (string?)null,
                        LogoFileName = (string?)null
                    };

                    var response = await Http.PostAsJsonAsync("/api/management/schools", createDto);
                    
                    if (response.IsSuccessStatusCode)
                    {
                        created++;
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
                    {
                        skipped++; // School already exists
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        errorMessage = "Authentication failed. Please refresh the page and try again.";
                        return;
                    }
                    else
                    {
                        var errorContent = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"Failed to create {school.Name}: {response.StatusCode} - {errorContent}");
                        errors++;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception creating {school.Name}: {ex.Message}");
                    errors++;
                }
            }

            await LoadSchoolsAsync();
            seedingMessage = $"Seeding complete: {created} created, {skipped} already existed, {errors} errors";
            
            if (errors > 0)
            {
                errorMessage = $"Some errors occurred during seeding. Check browser console for details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during seeding: {ex.Message}";
            Console.WriteLine($"Error seeding schools: {ex.Message}");
        }
        finally
        {
            seedingSchools = false;
            StateHasChanged();
        }
    }

    public class SchoolDto
    {
        public int SchoolId { get; set; }
        public string Name { get; set; } = "";
        public string? LogoURL { get; set; }
        public string? LogoFileName { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
        public int AuctionCount { get; set; }
    }

    public class SchoolFormModel
    {
        [Required]
        [MaxLength(100)]
        public string Name { get; set; } = "";

        public EditForm? FormReference { get; set; }

        public void OnSubmit()
        {
            FormReference?.OnValidSubmit.InvokeAsync();
        }
    }

}