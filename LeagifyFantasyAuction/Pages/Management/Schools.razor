@page "/management/schools"
@layout ManagementLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>School Management</PageTitle>

<style>
    .basic-container { padding: 20px; }
    .header-row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
    .button-group { display: flex; gap: 10px; }
    .btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }
    .btn-primary { background: #0078d4; color: white; }
    .btn-secondary { background: #6c757d; color: white; }
    .btn-info { background: #17a2b8; color: white; }
    .btn-light { background: #f8f9fa; color: #212529; border: 1px solid #dee2e6; }
    .btn-danger { background: #dc3545; color: white; }
    .btn:hover { opacity: 0.8; }
    .btn:disabled { opacity: 0.5; cursor: not-allowed; }
    .alert { padding: 12px; border-radius: 4px; margin: 10px 0; }
    .alert-warning { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }
    .alert-info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
    .alert-success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
    .alert-danger { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
    .basic-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
    .basic-table th, .basic-table td { padding: 8px 12px; border: 1px solid #dee2e6; text-align: left; }
    .basic-table th { background: #f8f9fa; font-weight: 600; }
    .basic-table tr:nth-child(even) { background: #f8f9fa; }
    .basic-table img { width: 32px; height: 32px; }
    .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; justify-content: center; align-items: center; }
    .modal-content { background: white; padding: 24px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); max-width: 500px; width: 90%; }
    .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; }
    .modal-footer { display: flex; gap: 10px; justify-content: flex-end; margin-top: 16px; }
    .form-group { margin-bottom: 16px; }
    .form-label { display: block; font-weight: 600; margin-bottom: 4px; }
    .form-control { width: 100%; padding: 8px 12px; border: 1px solid #ced4da; border-radius: 4px; font-size: 14px; }
    .form-text { color: #6c757d; font-size: 12px; margin-top: 4px; }
    .logo-preview { margin-top: 8px; }
</style>

<div class="basic-container">
    <div class="header-row">
        <h2>School Management</h2>
        <div class="button-group">
            <button class="btn btn-primary" @onclick="@OpenCsvImportDialog">
                üìÑ Import CSV with Logos
            </button>
            <button class="btn btn-secondary" @onclick="@OpenAddSchoolDialog">
                ‚ûï Add School
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning">
            @errorMessage
        </div>
    }


    <div>
        @if (schools == null)
        {
            <div class="alert alert-info">üîÑ Loading schools...</div>
        }
        else if (schools.Count == 0)
        {
            <div class="alert alert-info">
                No schools found. You can either add schools manually or seed all schools from the draft template.
            </div>
            <button class="btn btn-primary" 
                    @onclick="SeedSampleSchoolsAsync"
                    disabled="@seedingSchools">
                @if (seedingSchools)
                {
                    <span>üîÑ Seeding...</span>
                }
                else
                {
                    <span>üóÉÔ∏è Seed All 130 Schools from Template</span>
                }
            </button>
            
            @if (!string.IsNullOrEmpty(seedingMessage))
            {
                <div class="alert alert-success">
                    @seedingMessage
                </div>
            }
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
        }
        else
        {
            <FluentDataGrid Items="@schoolsQueryable" Pagination="@pagination">
                <PropertyColumn Property="@(s => s.SchoolId)" Title="ID" Sortable="true" />
                <PropertyColumn Property="@(s => s.Name)" Title="School Name" Sortable="true" />
                <TemplateColumn Title="Logo">
                    @if (!string.IsNullOrEmpty(context.LogoURL))
                    {
                        <img src="@context.LogoURL" alt="@context.Name" 
                             style="width: 32px; height: 32px;"
                             onerror="this.style.display='none'" />
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size20.Building())" />
                    }
                </TemplateColumn>
                <PropertyColumn Property="@(s => s.AuctionCount)" Title="Used in Auctions" Sortable="true" />
                <TemplateColumn Title="Created" Sortable="true" SortBy="@schoolCreatedSort">
                    @context.CreatedDate.ToString("MMM d, yyyy")
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <FluentStack Orientation="Orientation.Horizontal" Style="gap: 8px;">
                        <FluentButton Size="ButtonSize.Small" 
                                     IconStart="@(new Icons.Regular.Size16.Edit())"
                                     @onclick="@(() => OpenEditSchoolDialog(context))">
                            Edit
                        </FluentButton>
                        <FluentButton Size="ButtonSize.Small" 
                                     Appearance="Appearance.Accent" 
                                     Color="Color.Error"
                                     IconStart="@(new Icons.Regular.Size16.Delete())"
                                     Disabled="@(context.AuctionCount > 0)"
                                     @onclick="@(() => DeleteSchoolAsync(context))">
                            Delete
                        </FluentButton>
                    </FluentStack>
                </TemplateColumn>
            </FluentDataGrid>
            
            <FluentPaginator State="@pagination" />
        }
    </div>
</div>

@if (showSchoolDialog)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üè´ @(editingSchool == null ? "Add School" : "Edit School")</h3>
                <button @onclick="@CancelSchoolDialog" class="btn btn-light">√ó</button>
            </div>

            <EditForm Model="@schoolForm" OnValidSubmit="@SaveSchoolAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label class="form-label">School Name *</label>
                    <InputText @bind-Value="schoolForm.Name" class="form-control" required />
                </div>
                
                <div class="form-group">
                    <label class="form-label">Logo URL</label>
                    <InputText @bind-Value="schoolForm.LogoURL" class="form-control" 
                               placeholder="https://example.com/logo.svg" />
                    <small class="form-text">Enter a URL to a school logo image (SVG preferred)</small>
                </div>

                @if (!string.IsNullOrEmpty(schoolForm.LogoURL))
                {
                    <div class="form-group">
                        <label class="form-label">Logo Preview</label>
                        <div class="logo-preview">
                            <img src="@schoolForm.LogoURL" alt="Logo preview" 
                                 style="max-width: 64px; max-height: 64px; border: 1px solid #ddd; padding: 4px;"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                            <div style="display: none; color: #dc3545; font-size: 12px;">
                                ‚ùå Unable to load image from URL
                            </div>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" disabled="@savingSchool">
                        @if (savingSchool)
                        {
                            <span>üîÑ Saving...</span>
                        }
                        else
                        {
                            <span>@(editingSchool == null ? "Add School" : "Update School")</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@CancelSchoolDialog">
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (showCsvImportDialog)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üìÑ Import Schools from CSV</h3>
                <button @onclick="@CancelCsvImportDialog" class="btn btn-light">√ó</button>
            </div>

            @if (!importingCsv)
            {
                <div class="alert alert-info">
                    <strong>CSV Import with Logo Downloads:</strong><br/>
                    Upload your CSV file and school logos will be automatically downloaded and stored locally.
                    The CSV should have columns: School, Conference, ProjectedPoints, NumberOfProspects, SchoolURL, etc.
                </div>
                
                <div class="form-group">
                    <label class="form-label">Choose CSV File</label>
                    <InputFile OnChange="@OnCsvFileSelected" accept=".csv" class="form-control" />
                </div>

                @if (selectedCsvFile != null)
                {
                    <div class="alert alert-success">
                        Selected: <strong>@selectedCsvFile.Name</strong> (@selectedCsvFile.Size.ToString("N0") bytes)
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info">
                    üîÑ Importing CSV and downloading logos...
                </div>
                
                @if (!string.IsNullOrEmpty(csvImportStatus))
                {
                    <div class="alert alert-info">
                        @csvImportStatus
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(csvErrorMessage))
            {
                <div class="alert alert-danger">
                    @csvErrorMessage
                </div>
            }

            @if (csvImportResult != null)
            {
                <div class="alert alert-success">
                    <strong>Import Complete:</strong><br/>
                    ‚Ä¢ Schools processed: @csvImportResult.TotalSchools<br/>
                    ‚Ä¢ Logo downloads successful: @csvImportResult.SuccessfulDownloads<br/>
                    ‚Ä¢ Logo downloads failed: @csvImportResult.FailedDownloads<br/>
                    @if (csvImportResult.Errors.Any())
                    {
                        <br/><strong>Errors:</strong><br/>
                        @foreach (var error in csvImportResult.Errors)
                        {
                            <div>‚Ä¢ @error</div>
                        }
                    }
                </div>
            }

            <div class="modal-footer">
                @if (!importingCsv)
                {
                    <button class="btn btn-primary" 
                            disabled="@(selectedCsvFile == null)"
                            @onclick="ImportCsvAsync">
                        Import CSV & Download Logos
                    </button>
                }
                <button class="btn btn-secondary" @onclick="@CancelCsvImportDialog">
                    @(importingCsv ? "Close" : "Cancel")
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<SchoolDto>? schools;
    private IQueryable<SchoolDto>? schoolsQueryable;
    private PaginationState pagination = new() { ItemsPerPage = 20 };
    private GridSort<SchoolDto> schoolCreatedSort = GridSort<SchoolDto>.ByDescending(s => s.CreatedDate);
    private SchoolFormModel schoolForm = new();
    private SchoolDto? editingSchool;
    private bool savingSchool;
    private bool seedingSchools;
    private bool importingCsv;
    private string? errorMessage;
    private string? seedingMessage;
    private string? csvErrorMessage;
    private string? csvImportStatus;
    private IBrowserFile? selectedCsvFile;
    private byte[]? csvFileContent;
    private CsvImportResultDto? csvImportResult;
    private bool showSchoolDialog;
    private bool showCsvImportDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolsAsync();
    }

    private async Task LoadSchoolsAsync()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            schools = await Http.GetFromJsonAsync<List<SchoolDto>>("/api/management/schools") ?? new List<SchoolDto>();
            schoolsQueryable = schools.AsQueryable();
        }
        catch (Exception ex)
        {
            schools = new List<SchoolDto>();
            schoolsQueryable = schools.AsQueryable();
            Console.WriteLine($"Error loading schools: {ex.Message}");
        }
    }

    private void OpenAddSchoolDialog()
    {
        Console.WriteLine("DEBUG: OpenAddSchoolDialog called");
        editingSchool = null;
        schoolForm = new SchoolFormModel();
        errorMessage = null;
        showSchoolDialog = true;
        Console.WriteLine("DEBUG: OpenAddSchoolDialog completed");
    }

    private void OpenEditSchoolDialog(SchoolDto school)
    {
        editingSchool = school;
        schoolForm = new SchoolFormModel
        {
            Name = school.Name,
            LogoURL = school.LogoURL
        };
        errorMessage = null;
        showSchoolDialog = true;
    }

    private async Task SaveSchoolAsync()
    {
        savingSchool = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            if (editingSchool == null)
            {
                // Add new school - create clean DTO
                var createDto = new
                {
                    Name = schoolForm.Name,
                    LogoURL = schoolForm.LogoURL,
                    LogoFileName = (string?)null
                };

                var response = await Http.PostAsJsonAsync("/api/management/schools", createDto);
                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolsAsync();
                    showSchoolDialog = false;
                    StateHasChanged();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to add school: {error}";
                }
            }
            else
            {
                // Update existing school - create clean DTO
                var updateDto = new
                {
                    Name = schoolForm.Name,
                    LogoURL = schoolForm.LogoURL
                };

                var response = await Http.PutAsJsonAsync($"/api/management/schools/{editingSchool.SchoolId}", updateDto);
                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolsAsync();
                    showSchoolDialog = false;
                    StateHasChanged();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to update school: {error}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving school: {ex.Message}";
        }
        finally
        {
            savingSchool = false;
            StateHasChanged();
        }
    }

    private async Task DeleteSchoolAsync(SchoolDto school)
    {
        if (school.AuctionCount > 0)
        {
            return; // Button should be disabled, but double-check
        }

        // TODO: Add confirmation dialog
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await Http.DeleteAsync($"/api/management/schools/{school.SchoolId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadSchoolsAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting school: {ex.Message}");
        }
    }

    private void OpenCsvImportDialog()
    {
        Console.WriteLine("DEBUG: OpenCsvImportDialog called");
        selectedCsvFile = null;
        csvFileContent = null;
        csvErrorMessage = null;
        csvImportStatus = null;
        csvImportResult = null;
        importingCsv = false;
        showCsvImportDialog = true;
        Console.WriteLine("DEBUG: OpenCsvImportDialog completed");
    }


    private async Task OnCsvFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                selectedCsvFile = file;
                csvErrorMessage = null;
                
                // Read the file content immediately to avoid file reference issues
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                csvFileContent = memoryStream.ToArray();
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                csvErrorMessage = $"Error reading file: {ex.Message}";
                selectedCsvFile = null;
                csvFileContent = null;
                StateHasChanged();
            }
        }
    }

    private async Task ImportCsvAsync()
    {
        if (selectedCsvFile == null || csvFileContent == null)
        {
            csvErrorMessage = "Please select a CSV file first.";
            return;
        }

        importingCsv = true;
        csvErrorMessage = null;
        csvImportStatus = "Starting CSV import and logo downloads...";
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                csvErrorMessage = "Authentication token not found. Please refresh and try again.";
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Use the pre-read file content
            using var content = new ByteArrayContent(csvFileContent);
            content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

            csvImportStatus = "Uploading CSV file and processing schools...";
            StateHasChanged();

            // Send to the import endpoint
            var response = await Http.PostAsync("/api/management/schools/import", content);

            if (response.IsSuccessStatusCode)
            {
                var resultJson = await response.Content.ReadAsStringAsync();
                csvImportResult = System.Text.Json.JsonSerializer.Deserialize<CsvImportResultDto>(resultJson, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                csvImportStatus = "Import completed successfully!";
                await LoadSchoolsAsync(); // Refresh the school list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                csvErrorMessage = $"Import failed: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            csvErrorMessage = $"Error during CSV import: {ex.Message}";
        }
        finally
        {
            importingCsv = false;
            StateHasChanged();
        }
    }

    private async Task SeedSampleSchoolsAsync()
    {
        seedingSchools = true;
        errorMessage = null;
        seedingMessage = null;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authentication token not found. Please refresh and try again.";
                return;
            }
            
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            seedingMessage = "Starting to seed schools...";

            // All schools from current SampleDraftTemplate.csv
            var sampleSchools = new[]
            {
                new { Name = "Abilene Christian" },
                new { Name = "Air Force" },
                new { Name = "Akron" },
                new { Name = "Alabama" },
                new { Name = "Appalachian State" },
                new { Name = "Arizona" },
                new { Name = "Arizona State" },
                new { Name = "Arkansas" },
                new { Name = "Arkansas State" },
                new { Name = "Auburn" },
                new { Name = "BYU" },
                new { Name = "Baylor" },
                new { Name = "Boise State" },
                new { Name = "Boston College" },
                new { Name = "Bowling Green" },
                new { Name = "Buffalo" },
                new { Name = "Cal Poly" },
                new { Name = "California" },
                new { Name = "Charlotte" },
                new { Name = "Cincinnati" },
                new { Name = "Clemson" },
                new { Name = "Coastal Carolina" },
                new { Name = "Colorado" },
                new { Name = "Duke" },
                new { Name = "East Carolina" },
                new { Name = "East Tennessee State" },
                new { Name = "Florida" },
                new { Name = "Florida A&M" },
                new { Name = "Florida Atlantic" },
                new { Name = "Florida International" },
                new { Name = "Florida State" },
                new { Name = "Fresno State" },
                new { Name = "Georgia" },
                new { Name = "Georgia Southern" },
                new { Name = "Georgia Tech" },
                new { Name = "Harvard" },
                new { Name = "Houston" },
                new { Name = "Illinois" },
                new { Name = "Indiana" },
                new { Name = "Iowa" },
                new { Name = "Iowa State" },
                new { Name = "Jacksonville State" },
                new { Name = "James Madison" },
                new { Name = "Kansas" },
                new { Name = "Kansas State" },
                new { Name = "Kentucky" },
                new { Name = "LSU" },
                new { Name = "Lafayette" },
                new { Name = "Louisiana-Lafayette" },
                new { Name = "Louisville" },
                new { Name = "Marshall" },
                new { Name = "Maryland" },
                new { Name = "Massachusetts" },
                new { Name = "McNeese State" },
                new { Name = "Memphis" },
                new { Name = "Miami (FL)" },
                new { Name = "Miami (OH)" },
                new { Name = "Michigan" },
                new { Name = "Michigan State" },
                new { Name = "Minnesota" },
                new { Name = "Mississippi State" },
                new { Name = "Missouri" },
                new { Name = "NC State" },
                new { Name = "Nebraska" },
                new { Name = "Nevada" },
                new { Name = "North Carolina" },
                new { Name = "North Dakota" },
                new { Name = "North Dakota State" },
                new { Name = "Northern Illinois" },
                new { Name = "Northwestern" },
                new { Name = "Notre Dame" },
                new { Name = "Ohio State" },
                new { Name = "Oklahoma" },
                new { Name = "Oklahoma State" },
                new { Name = "Old Dominion" },
                new { Name = "Ole Miss" },
                new { Name = "Oregon" },
                new { Name = "Oregon State" },
                new { Name = "Penn State" },
                new { Name = "Pitt" },
                new { Name = "Portland State" },
                new { Name = "Purdue" },
                new { Name = "Rice" },
                new { Name = "Rutgers" },
                new { Name = "SMU" },
                new { Name = "Sacramento State" },
                new { Name = "Sam Houston State" },
                new { Name = "San Diego State" },
                new { Name = "San Jose State" },
                new { Name = "South Carolina" },
                new { Name = "South Dakota State" },
                new { Name = "South Florida" },
                new { Name = "Southern Miss" },
                new { Name = "Stanford" },
                new { Name = "Stephen F. Austin" },
                new { Name = "Syracuse" },
                new { Name = "TCU" },
                new { Name = "Tarleton State" },
                new { Name = "Tennessee" },
                new { Name = "Texas" },
                new { Name = "Texas A&M" },
                new { Name = "Texas State" },
                new { Name = "Texas Tech" },
                new { Name = "Toledo" },
                new { Name = "Troy" },
                new { Name = "Tulane" },
                new { Name = "Tulsa" },
                new { Name = "UAB" },
                new { Name = "UCF" },
                new { Name = "UCLA" },
                new { Name = "UConn" },
                new { Name = "UNLV" },
                new { Name = "USC" },
                new { Name = "UTEP" },
                new { Name = "UTSA" },
                new { Name = "Utah" },
                new { Name = "Utah State" },
                new { Name = "Vanderbilt" },
                new { Name = "Virginia" },
                new { Name = "Virginia State" },
                new { Name = "Virginia Tech" },
                new { Name = "Wake Forest" },
                new { Name = "Washington" },
                new { Name = "Washington State" },
                new { Name = "West Virginia" },
                new { Name = "Western Michigan" },
                new { Name = "William & Mary" },
                new { Name = "Wisconsin" },
                new { Name = "Wyoming" },
                new { Name = "Youngstown State" }
            };

            int created = 0;
            int skipped = 0;
            int errors = 0;
            
            for (int i = 0; i < sampleSchools.Length; i++)
            {
                var school = sampleSchools[i];
                try
                {
                    // Update progress every 10 schools
                    if (i % 10 == 0)
                    {
                        seedingMessage = $"Seeding school {i + 1} of {sampleSchools.Length}: {school.Name}";
                        StateHasChanged();
                    }
                    
                    // Add SVG logo URLs from the CSV template data for testing image loading
                    var logoUrl = school.Name switch
                    {
                        "Alabama" => "https://d9ioojyvhqpok.cloudfront.net/ipat9gfnm0mjkzxjgjduhgd3dhh5",
                        "Clemson" => "https://d9ioojyvhqpok.cloudfront.net/qdoiydn8n7rrbe24fh91o35g46a2", 
                        "Penn State" => "https://d9ioojyvhqpok.cloudfront.net/r7ka9jaowmh2i9mbty8xvcw3lszi",
                        "Texas" => "https://d9ioojyvhqpok.cloudfront.net/qg9cbgbb8dt3ibmkhhpbnxnmu2ym",
                        "Oregon" => "https://d9ioojyvhqpok.cloudfront.net/jtm5dpazszqv0w6emkd6479rdrk8",
                        "Ohio State" => "https://d9ioojyvhqpok.cloudfront.net/t0cc17koiq4lypyf6v0bjmb48dl1",
                        "LSU" => "https://d9ioojyvhqpok.cloudfront.net/kotupd48marnkuttwxr1ueuusuq4",
                        "Georgia" => "https://d9ioojyvhqpok.cloudfront.net/lk6cx1kv1jp68409gl92aapm1amw",
                        "Florida" => "https://d9ioojyvhqpok.cloudfront.net/36khmjuee0xz2lxwa0xvcpewulbr",
                        "Texas A&M" => "https://d9ioojyvhqpok.cloudfront.net/2zs6v615in0lqkjlrpwr0ss7jal3",
                        "Auburn" => "https://d9ioojyvhqpok.cloudfront.net/eleiezsd0lvxbat70oyxvobqj1wy",
                        "Notre Dame" => "https://d9ioojyvhqpok.cloudfront.net/tbs37oz73f8lx0yton630db3mwil",
                        "Utah" => "https://d9ioojyvhqpok.cloudfront.net/6knutc24htvta65sc5lynfbx3bag",
                        "South Carolina" => "https://d9ioojyvhqpok.cloudfront.net/xf3wi54n26qaha5aventrscyqj9i",
                        "Arizona State" => "https://d9ioojyvhqpok.cloudfront.net/ki89e84ng0fbkdkof0pb7l8eavl7",
                        "Miami (FL)" => "https://d9ioojyvhqpok.cloudfront.net/ua8vtcmx37g6fru3tna1nygak655",
                        "Indiana" => "https://d9ioojyvhqpok.cloudfront.net/wapph05yk3m4c6hzhc4793w94sxj",
                        "USC" => "https://d9ioojyvhqpok.cloudfront.net/9qzau6lr9d2g4rnpah5m4o5l5wrb",
                        "Oklahoma" => "https://d9ioojyvhqpok.cloudfront.net/2oxpf3x0lqqyaqu2vusmkrrfpvz4",
                        "Michigan" => "https://d9ioojyvhqpok.cloudfront.net/q8wl5dk6g7zupims4dtdrh3ssr12",
                        "Missouri" => "https://d9ioojyvhqpok.cloudfront.net/at4tedy432dma8a852zl29mhpl97",
                        "Iowa" => "https://d9ioojyvhqpok.cloudfront.net/1v4qash6kghlbzawlc9mcktcv6et",
                        "Illinois" => "https://d9ioojyvhqpok.cloudfront.net/ufjr2mjvb39qtuuxl324m16av9zg",
                        "Tennessee" => "https://d9ioojyvhqpok.cloudfront.net/xvzdtm1u94la26tuf9s7k9biiobk",
                        "Washington" => "https://d9ioojyvhqpok.cloudfront.net/ymbx2qwvtd64qbet6aw5rlpvlznq",
                        "Louisville" => "https://d9ioojyvhqpok.cloudfront.net/6dtekr0ju42cquwnyoilhqr5048j",
                        "Texas Tech" => "https://d9ioojyvhqpok.cloudfront.net/kuscl9st1izh66xvf7t3cqs05xlc",
                        "Ole Miss" => "https://d9ioojyvhqpok.cloudfront.net/4ci7fizvkcl1pmfv17qg8ngxjghp",
                        _ => null
                    };

                    var createDto = new
                    {
                        Name = school.Name,
                        LogoURL = logoUrl,
                        LogoFileName = (string?)null
                    };

                    var response = await Http.PostAsJsonAsync("/api/management/schools", createDto);
                    
                    if (response.IsSuccessStatusCode)
                    {
                        created++;
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
                    {
                        skipped++; // School already exists
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        errorMessage = "Authentication failed. Please refresh the page and try again.";
                        return;
                    }
                    else
                    {
                        var errorContent = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"Failed to create {school.Name}: {response.StatusCode} - {errorContent}");
                        errors++;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception creating {school.Name}: {ex.Message}");
                    errors++;
                }
            }

            await LoadSchoolsAsync();
            seedingMessage = $"Seeding complete: {created} created, {skipped} already existed, {errors} errors";
            
            if (errors > 0)
            {
                errorMessage = $"Some errors occurred during seeding. Check browser console for details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during seeding: {ex.Message}";
            Console.WriteLine($"Error seeding schools: {ex.Message}");
        }
        finally
        {
            seedingSchools = false;
            StateHasChanged();
        }
    }

    private void CancelSchoolDialog()
    {
        // Clean up state before hiding dialog to prevent focus issues
        savingSchool = false;
        errorMessage = null;
        showSchoolDialog = false;
        StateHasChanged();
    }

    private void CancelCsvImportDialog()
    {
        // Clean up state before hiding dialog to prevent focus issues
        csvErrorMessage = null;
        csvImportStatus = null;
        selectedCsvFile = null;
        csvFileContent = null;
        showCsvImportDialog = false;
        StateHasChanged();
    }

    public class SchoolDto
    {
        public int SchoolId { get; set; }
        public string Name { get; set; } = "";
        public string? LogoURL { get; set; }
        public string? LogoFileName { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
        public int AuctionCount { get; set; }
    }

    public class SchoolFormModel
    {
        [Required]
        [MaxLength(100)]
        public string Name { get; set; } = "";

        [MaxLength(500)]
        public string? LogoURL { get; set; }

        public EditForm? FormReference { get; set; }

        public void OnSubmit()
        {
            FormReference?.OnValidSubmit.InvokeAsync();
        }
    }

    public class CsvImportResultDto
    {
        public bool Success { get; set; }
        public int TotalSchools { get; set; }
        public int SuccessfulDownloads { get; set; }
        public int FailedDownloads { get; set; }
        public List<string> Errors { get; set; } = new();
        public List<FailedDownloadDto> FailedDownloadDetails { get; set; } = new();
    }

    public class FailedDownloadDto
    {
        public string SchoolName { get; set; } = "";
        public string Url { get; set; } = "";
        public string Error { get; set; } = "";
    }

}