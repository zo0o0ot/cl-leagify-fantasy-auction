@page "/management/schools"
@layout ManagementLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>School Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
        <FluentLabel Typo="Typography.H2">School Management</FluentLabel>
        <FluentButton Appearance="Appearance.Accent" 
                     IconStart="@(new Icons.Regular.Size20.Add())"
                     OnClick="OpenAddSchoolDialog">
            Add School
        </FluentButton>
    </FluentStack>

    <FluentCard>
        @if (schools == null)
        {
            <FluentProgressRing>Loading schools...</FluentProgressRing>
        }
        else if (schools.Count == 0)
        {
            <div class="alert alert-info" role="alert">
                No schools found. Add your first school to get started.
            </div>
        }
        else
        {
            <FluentDataGrid Items="@schools.AsQueryable()" ResizableColumns="true" Pagination="@pagination">
                <PropertyColumn Property="@(s => s.SchoolId)" Title="ID" Sortable="true" Align="Align.Start" />
                <PropertyColumn Property="@(s => s.Name)" Title="Name" Sortable="true" />
                <TemplateColumn Title="Logo" Align="Align.Center">
                    @if (!string.IsNullOrEmpty(context.LogoURL))
                    {
                        <img src="@context.LogoURL" alt="@context.Name" style="width: 32px; height: 32px;" 
                             onerror="this.style.display='none'" />
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size20.Building())" Color="Color.Neutral" />
                    }
                </TemplateColumn>
                <PropertyColumn Property="@(s => s.AuctionCount)" Title="Used in Auctions" Sortable="true" Align="Align.Center" />
                <PropertyColumn Property="@(s => s.CreatedDate)" Title="Created" Format="MMM d, yyyy" Sortable="true" />
                <TemplateColumn Title="Actions" Align="Align.Center">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                        <FluentButton Appearance="Appearance.Lightweight" 
                                     IconStart="@(new Icons.Regular.Size16.Edit())"
                                     OnClick="() => OpenEditSchoolDialog(context)">
                            Edit
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Lightweight" 
                                     IconStart="@(new Icons.Regular.Size16.Delete())"
                                     OnClick="() => DeleteSchoolAsync(context)"
                                     Disabled="@(context.AuctionCount > 0)">
                            Delete
                        </FluentButton>
                    </FluentStack>
                </TemplateColumn>
            </FluentDataGrid>
            
            <FluentPaginator State="@pagination" />
        }
    </FluentCard>
</FluentStack>

<FluentDialog @ref="schoolDialog" Modal="true" TrapFocus="true" AriaLabel="School Form">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Building())" />
            <FluentLabel Typo="Typography.PaneHeader">
                @(editingSchool == null ? "Add School" : "Edit School")
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        <EditForm Model="@schoolForm" OnValidSubmit="@SaveSchoolAsync">
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentStack Orientation="Orientation.Vertical" VerticalGap="15">
                <FluentTextField @bind-Value="schoolForm.Name" 
                               Label="School Name" 
                               Required="true"
                               Style="width: 100%;" />

                <FluentTextField @bind-Value="schoolForm.LogoURL" 
                               Label="Logo URL (External)" 
                               Placeholder="https://example.com/logo.svg"
                               Style="width: 100%;" />

                @if (!string.IsNullOrEmpty(schoolForm.LogoURL))
                {
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="10">
                        <FluentButton Appearance="Appearance.Lightweight" 
                                     OnClick="TestLogoUrlAsync"
                                     Loading="@testingLogo">
                            Test Logo URL
                        </FluentButton>
                        @if (logoTestResult != null)
                        {
                            <FluentBadge Appearance="@(logoTestResult.IsValid ? Appearance.Accent : Appearance.Lightweight)"
                                        BackgroundColor="@(logoTestResult.IsValid ? "var(--accent-fill-rest)" : "var(--neutral-fill-secondary-rest)")"
                                        Color="@(logoTestResult.IsValid ? "var(--accent-foreground-rest)" : "var(--neutral-foreground-rest)")">
                                @logoTestResult.Message
                            </FluentBadge>
                        }
                    </FluentStack>
                }

                <FluentTextField @bind-Value="schoolForm.LogoFileName" 
                               Label="Logo File Name (Internal Fallback)" 
                               Placeholder="school-logo.svg"
                               Style="width: 100%;" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </FluentStack>
        </EditForm>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" 
                     Loading="@savingSchool"
                     OnClick="@(() => schoolForm?.OnSubmit())">
            @(editingSchool == null ? "Add School" : "Update School")
        </FluentButton>
        <FluentButton Appearance="Appearance.Neutral" 
                     OnClick="@(() => schoolDialog?.Hide())">
            Cancel
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private List<SchoolDto>? schools;
    private PaginationState pagination = new() { ItemsPerPage = 20 };
    private FluentDialog? schoolDialog;
    private SchoolFormModel schoolForm = new();
    private SchoolDto? editingSchool;
    private bool savingSchool;
    private bool testingLogo;
    private string? errorMessage;
    private LogoTestResult? logoTestResult;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolsAsync();
    }

    private async Task LoadSchoolsAsync()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            schools = await Http.GetFromJsonAsync<List<SchoolDto>>("/api/management/schools") ?? new List<SchoolDto>();
        }
        catch (Exception ex)
        {
            schools = new List<SchoolDto>();
            Console.WriteLine($"Error loading schools: {ex.Message}");
        }
    }

    private void OpenAddSchoolDialog()
    {
        editingSchool = null;
        schoolForm = new SchoolFormModel();
        errorMessage = null;
        logoTestResult = null;
        schoolDialog?.Show();
    }

    private void OpenEditSchoolDialog(SchoolDto school)
    {
        editingSchool = school;
        schoolForm = new SchoolFormModel
        {
            Name = school.Name,
            LogoURL = school.LogoURL,
            LogoFileName = school.LogoFileName
        };
        errorMessage = null;
        logoTestResult = null;
        schoolDialog?.Show();
    }

    private async Task SaveSchoolAsync()
    {
        savingSchool = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            if (editingSchool == null)
            {
                // Add new school
                var response = await Http.PostAsJsonAsync("/api/management/schools", schoolForm);
                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolsAsync();
                    schoolDialog!.Hide();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to add school: {error}";
                }
            }
            else
            {
                // Update existing school
                var response = await Http.PutAsJsonAsync($"/api/management/schools/{editingSchool.SchoolId}", schoolForm);
                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolsAsync();
                    schoolDialog!.Hide();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to update school: {error}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving school: {ex.Message}";
        }
        finally
        {
            savingSchool = false;
            StateHasChanged();
        }
    }

    private async Task DeleteSchoolAsync(SchoolDto school)
    {
        if (school.AuctionCount > 0)
        {
            return; // Button should be disabled, but double-check
        }

        // TODO: Add confirmation dialog
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await Http.DeleteAsync($"/api/management/schools/{school.SchoolId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadSchoolsAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting school: {ex.Message}");
        }
    }

    private async Task TestLogoUrlAsync()
    {
        if (string.IsNullOrEmpty(schoolForm.LogoURL))
        {
            return;
        }

        testingLogo = true;
        logoTestResult = null;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var testRequest = new { LogoURL = schoolForm.LogoURL };
            var response = await Http.PostAsJsonAsync("/api/management/schools/test-logo", testRequest);
            
            if (response.IsSuccessStatusCode)
            {
                logoTestResult = await response.Content.ReadFromJsonAsync<LogoTestResult>();
            }
            else
            {
                logoTestResult = new LogoTestResult { IsValid = false, Message = "Test failed" };
            }
        }
        catch (Exception ex)
        {
            logoTestResult = new LogoTestResult { IsValid = false, Message = $"Error: {ex.Message}" };
        }
        finally
        {
            testingLogo = false;
            StateHasChanged();
        }
    }

    public class SchoolDto
    {
        public int SchoolId { get; set; }
        public string Name { get; set; } = "";
        public string? LogoURL { get; set; }
        public string? LogoFileName { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
        public int AuctionCount { get; set; }
    }

    public class SchoolFormModel
    {
        [Required]
        [MaxLength(100)]
        public string Name { get; set; } = "";

        [MaxLength(500)]
        public string? LogoURL { get; set; }

        [MaxLength(100)]
        public string? LogoFileName { get; set; }

        public EditForm? FormReference { get; set; }

        public void OnSubmit()
        {
            FormReference?.OnValidSubmit.InvokeAsync();
        }
    }

    public class LogoTestResult
    {
        public bool IsValid { get; set; }
        public int StatusCode { get; set; }
        public string? ContentType { get; set; }
        public string Message { get; set; } = "";
    }
}