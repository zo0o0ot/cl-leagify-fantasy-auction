@page "/management/auctions/{auctionId:int}/details"
@layout ManagementLayout
@using System.Net.Http.Json
@using LeagifyFantasyAuction.Components
@using LeagifyFantasyAuction.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Auction Details - Leagify Fantasy Auction</PageTitle>

<div class="auction-details-container">
    
    <!-- Header Section -->
    <div class="details-header">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16">
            <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowLeft())" 
                          Appearance="Appearance.Neutral" 
                          OnClick="@NavigateBack">
                Back to Auctions
            </FluentButton>
            
            <FluentStack Orientation="Orientation.Vertical" Style="flex: 1;">
                <FluentLabel Typo="Typography.Header" Style="margin: 0;">
                    @(auction?.Name ?? "Loading...")
                </FluentLabel>
                <FluentLabel Style="color: #666; margin: 0;">
                    Manage participants, roles, and auction settings
                </FluentLabel>
            </FluentStack>
            
            @if (auction != null)
            {
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12">
                    <FluentBadge Appearance="@GetStatusBadgeAppearance(auction.Status)">
                        @auction.Status
                    </FluentBadge>
                    
                    <FluentButton Appearance="Appearance.Accent" 
                                  IconStart="@(new Icons.Regular.Size16.Settings())"
                                  OnClick="@(() => Navigation.NavigateTo($"/management/auctions/{auctionId}/setup"))">
                        Setup Auction
                    </FluentButton>
                </FluentStack>
            }
        </FluentStack>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="loading-container">
            <FluentProgressRing />
            <FluentLabel>Loading auction details...</FluentLabel>
        </div>
    }
    else if (auction == null)
    {
        <FluentMessageBar Intent="MessageIntent.Error">
            Auction not found or you don't have permission to access it.
        </FluentMessageBar>
    }
    else
    {
        <!-- Auction Summary -->
        <div class="summary-section">
            <FluentCard>
                <FluentLabel Typo="Typography.Subject" Style="margin-bottom: 16px;">
                    Auction Summary
                </FluentLabel>
                
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="32" Wrap="true">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                        <FluentLabel Style="font-weight: 600;">Join Code</FluentLabel>
                        <FluentLabel Style="font-family: monospace; font-size: 18px; color: #0078d4;">
                            @auction.JoinCode
                        </FluentLabel>
                    </FluentStack>
                    
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                        <FluentLabel Style="font-weight: 600;">Created</FluentLabel>
                        <FluentLabel>@auction.CreatedDate.ToString("MMM dd, yyyy 'at' h:mm tt")</FluentLabel>
                    </FluentStack>
                    
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                        <FluentLabel Style="font-weight: 600;">Participants</FluentLabel>
                        <FluentLabel>@participantCount users joined</FluentLabel>
                    </FluentStack>
                </FluentStack>
            </FluentCard>
        </div>

        <!-- Role Assignment Panel -->
        <RoleAssignmentPanel AuctionId="@auctionId" OnRoleAssigned="@OnRoleAssignmentChanged" />

        <!-- Quick Actions -->
        <div class="actions-section">
            <FluentCard>
                <FluentLabel Typo="Typography.Subject" Style="margin-bottom: 16px;">
                    Quick Actions
                </FluentLabel>
                
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" Wrap="true">
                    <FluentButton Appearance="Appearance.Neutral" 
                                  IconStart="@(new Icons.Regular.Size16.Settings())"
                                  OnClick="@(() => Navigation.NavigateTo($"/management/auctions/{auctionId}/setup"))">
                        Auction Setup
                    </FluentButton>
                    
                    <FluentButton Appearance="Appearance.Neutral" 
                                  IconStart="@(new Icons.Regular.Size16.People())"
                                  OnClick="@RefreshParticipants">
                        Refresh Participants
                    </FluentButton>
                    
                    @if (auction.Status == "Draft")
                    {
                        <FluentButton Appearance="Appearance.Accent" 
                                      IconStart="@(new Icons.Regular.Size16.Play())"
                                      OnClick="@StartAuction"
                                      Disabled="@(participantCount == 0)">
                            Start Auction
                        </FluentButton>
                    }
                    else if (auction.Status == "InProgress")
                    {
                        <FluentButton Appearance="Appearance.Neutral" 
                                      IconStart="@(new Icons.Regular.Size16.Pause())"
                                      OnClick="@PauseAuction">
                            Pause Auction
                        </FluentButton>
                    }
                </FluentStack>
            </FluentCard>
        </div>
    }
</div>

@code {
    [Parameter] public int AuctionId { get; set; }

    private int auctionId;
    private AuctionDto? auction;
    private bool isLoading = true;
    private int participantCount = 0;

    protected override async Task OnInitializedAsync()
    {
        auctionId = AuctionId;
        await LoadAuctionDetails();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (auctionId != AuctionId)
        {
            auctionId = AuctionId;
            await LoadAuctionDetails();
        }
    }

    private async Task LoadAuctionDetails()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/management/login");
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Load auction details
            var response = await Http.GetAsync($"/api/management/auctions/{auctionId}");
            if (response.IsSuccessStatusCode)
            {
                auction = await response.Content.ReadFromJsonAsync<AuctionDto>();
            }

            // Load participant count
            await LoadParticipantCount();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading auction details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadParticipantCount()
    {
        try
        {
            var response = await Http.GetAsync($"/api/auction/{auctionId}/participants");
            if (response.IsSuccessStatusCode)
            {
                var participants = await response.Content.ReadFromJsonAsync<List<object>>();
                participantCount = participants?.Count ?? 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading participant count: {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/management/auctions");
    }

    private async Task OnRoleAssignmentChanged()
    {
        // Refresh participant count when roles are assigned
        await LoadParticipantCount();
        StateHasChanged();
    }

    private async Task RefreshParticipants()
    {
        await LoadParticipantCount();
        StateHasChanged();
    }

    private async Task StartAuction()
    {
        try
        {
            // TODO: Implement auction start logic
            await JSRuntime.InvokeVoidAsync("alert", "Auction start functionality will be implemented in Phase 5");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting auction: {ex.Message}");
        }
    }

    private async Task PauseAuction()
    {
        try
        {
            // TODO: Implement auction pause logic
            await JSRuntime.InvokeVoidAsync("alert", "Auction pause functionality will be implemented in Phase 5");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error pausing auction: {ex.Message}");
        }
    }

    private static Appearance GetStatusBadgeAppearance(string status) => status switch
    {
        "Draft" => Appearance.Neutral,
        "InProgress" => Appearance.Accent,
        "Complete" => Appearance.Neutral,
        _ => Appearance.Lightweight
    };
}

<style>
    .auction-details-container {
        padding: 24px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: calc(100vh - 100px);
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .details-header {
        background: white;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .details-header fluent-stack {
        gap: 12px;
        flex-wrap: wrap;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        gap: 16px;
    }

    .summary-section,
    .actions-section {
        background: white;
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .summary-section fluent-card,
    .actions-section fluent-card {
        padding: 24px;
    }

    /* Mobile responsive styles */
    .mobile-layout {
        padding: 16px;
        gap: 16px;
    }
</style>