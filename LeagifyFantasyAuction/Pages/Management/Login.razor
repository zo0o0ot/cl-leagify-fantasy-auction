@page "/management/login"
@layout EmptyLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: var(--neutral-layer-1); padding: 16px;">
    <FluentCard Style="width: 100%; max-width: 400px; padding: 32px; box-sizing: border-box;">
        <div style="display: flex; flex-direction: column; gap: 24px; text-align: center; align-items: center;">
            <div style="display: flex; flex-direction: column; gap: 8px; align-items: center;">
                <FluentIcon Value="@(new Icons.Regular.Size32.Shield())" Color="Color.Accent" />
                <FluentLabel Typo="Typography.PageTitle" Style="word-break: break-word;">Management Access</FluentLabel>
                <FluentLabel Typo="Typography.Body" Style="word-wrap: break-word;">
                    Enter the master password to access the management interface.
                </FluentLabel>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <FluentMessageBar Intent="MessageIntent.Error">
                    @errorMessage
                </FluentMessageBar>
            }

            @if (isLoading)
            {
                <div style="display: flex; flex-direction: column; gap: 16px; align-items: center;">
                    <FluentProgressRing />
                    <FluentLabel>Authenticating...</FluentLabel>
                </div>
            }
            else
            {
                <EditForm Model="@loginModel" OnValidSubmit="@LoginAsync" style="width: 100%;">
                    <div style="display: flex; flex-direction: column; gap: 16px; width: 100%; align-items: center;">
                        <FluentTextField @bind-Value="loginModel.Password" 
                                       Label="Master Password" 
                                       Type="TextFieldType.Password"
                                       Required="true"
                                       Style="width: 100%; min-width: 0; box-sizing: border-box;"
                                       @onkeypress="@OnKeyPress" />
                        
                        <FluentButton Type="ButtonType.Submit" 
                                     Appearance="Appearance.Accent" 
                                     Style="width: 100%;">
                            Sign In
                        </FluentButton>
                    </div>
                </EditForm>
            }

            <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-hint); font-size: 12px; word-wrap: break-word;">
                This is a secure management area. Only authorized personnel should access this interface.
            </FluentLabel>
        </div>
    </FluentCard>
</div>

<style>
    /* Ensure responsive layout */
    .fluent-text-field {
        width: 100% !important;
        min-width: 0 !important;
        box-sizing: border-box !important;
    }
    
    .fluent-text-field input {
        width: 100% !important;
        min-width: 0 !important;
        box-sizing: border-box !important;
    }

    @@media (max-width: 480px) {
        .fluent-card {
            margin: 0 8px;
            padding: 24px !important;
        }
    }
</style>


@code {
    private LoginModel loginModel = new();
    private bool isLoading;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Check if already logged in
        var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
        if (!string.IsNullOrEmpty(token))
        {
            // Validate existing token
            try
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var response = await Http.GetAsync("/api/management/auth/validate");
                
                if (response.IsSuccessStatusCode)
                {
                    // Valid token, redirect to dashboard
                    Navigation.NavigateTo("/management/schools");
                    return;
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // Expected response for invalid/expired token - just clear it
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "managementToken");
                    Http.DefaultRequestHeaders.Authorization = null;
                }
            }
            catch (Exception ex)
            {
                // Network error or other issue - clear token and continue to login form
                Console.WriteLine($"Token validation error: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "managementToken");
                Http.DefaultRequestHeaders.Authorization = null;
            }
        }
    }

    private async Task LoginAsync()
    {
        if (isLoading) return;
        
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("/api/management/auth/login", loginModel);
            
            Console.WriteLine($"Login response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Login response content: {responseContent}");
                
                // Parse the response manually since we already read it as string
                var result = System.Text.Json.JsonSerializer.Deserialize<AuthResponse>(responseContent, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                Console.WriteLine($"Login result: Success={result?.Success}, Token length={result?.Token?.Length ?? 0}");
                
                if (result?.Success == true && !string.IsNullOrEmpty(result.Token))
                {
                    // Store token in localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "managementToken", result.Token);
                    Console.WriteLine($"Token stored in localStorage");
                    
                    // Set authorization header for future requests
                    Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);
                    Console.WriteLine($"Authorization header set");
                    
                    // Navigate to management dashboard
                    Console.WriteLine("Navigating to /management/schools");
                    Navigation.NavigateTo("/management/schools");
                    return;
                }
                else
                {
                    Console.WriteLine("Login succeeded but result was invalid");
                }
            }
            
            // Login failed
            var errorContent = await response.Content.ReadAsStringAsync();
            errorMessage = response.StatusCode == System.Net.HttpStatusCode.Unauthorized ? 
                "Invalid password. Please try again." : 
                $"Login failed: {errorContent}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Connection error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await LoginAsync();
        }
    }

    public class LoginModel
    {
        public string Password { get; set; } = "";
    }

    public class AuthResponse
    {
        public bool Success { get; set; }
        public string? Token { get; set; }
        public string? Message { get; set; }
        public DateTime? ExpiresAt { get; set; }
    }
}