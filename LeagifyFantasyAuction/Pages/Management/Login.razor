@page "/management/login"
@layout EmptyLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <h3>Management Login</h3>
        
        <EditForm Model="@loginModel" OnValidSubmit="@LoginAsync">
            <div class="form-group">
                <label class="form-label">Master Password</label>
                <InputText @bind-Value="loginModel.Password" type="password" class="form-control" required />
            </div>
            
            <button type="submit" class="btn btn-primary login-btn" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>ðŸ”„ Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
    </div>
</div>

<style>
    .login-container { display: flex; justify-content: center; align-items: center; min-height: 100vh; background: #f5f5f5; }
    .login-card { background: white; border: 1px solid #ddd; border-radius: 8px; padding: 32px; width: 400px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
    .login-card h3 { text-align: center; margin-bottom: 24px; }
    .form-group { margin-bottom: 16px; }
    .form-label { display: block; font-weight: 600; margin-bottom: 4px; }
    .form-control { width: 100%; padding: 8px 12px; border: 1px solid #ced4da; border-radius: 4px; font-size: 14px; }
    .login-btn { width: 100%; margin-top: 8px; }
    .btn { padding: 10px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }
    .btn-primary { background: #0078d4; color: white; }
    .btn:hover:not(:disabled) { opacity: 0.8; }
    .btn:disabled { opacity: 0.5; cursor: not-allowed; }
    .alert { padding: 12px; border-radius: 4px; margin-top: 16px; }
    .alert-danger { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
</style>

@code {
    private LoginModel loginModel = new();
    private bool isLoading;
    private string? errorMessage;

    private async Task LoginAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("/api/management/auth", loginModel);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (result?.Success == true && !string.IsNullOrEmpty(result.Token))
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "managementToken", result.Token);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "tokenExpiration", result.ExpiresAt?.ToString("O"));
                    
                    Navigation.NavigateTo("/management", true);
                }
                else
                {
                    errorMessage = result?.Message ?? "Login failed";
                }
            }
            else
            {
                errorMessage = "Invalid credentials";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        public string Password { get; set; } = "";
    }

    public class AuthResponse
    {
        public bool Success { get; set; }
        public string? Token { get; set; }
        public string? Message { get; set; }
        public DateTime? ExpiresAt { get; set; }
    }
}