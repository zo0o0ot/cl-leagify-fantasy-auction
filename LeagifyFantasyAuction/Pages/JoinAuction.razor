@page "/join"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Join Auction - Leagify Fantasy Auction</PageTitle>

<div class="join-auction-container">
    <div class="join-card">
        <div class="join-header">
            <FluentIcon Value="@(new Icons.Regular.Size32.People())" Style="color: #0078d4; margin-bottom: 16px;" />
            <FluentLabel Typo="Typography.Header" Style="margin: 0;">
                Join Fantasy Auction
            </FluentLabel>
            <FluentLabel Style="color: #666; margin-top: 8px;">
                Enter your join code and display name to participate
            </FluentLabel>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <FluentMessageBar Intent="MessageIntent.Error" Style="margin-bottom: 24px;">
                @errorMessage
            </FluentMessageBar>
        }

        <EditForm Model="@joinRequest" OnValidSubmit="@HandleJoinAuction">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <FluentLabel For="joinCode" Style="margin-bottom: 8px;">
                    Join Code *
                </FluentLabel>
                <FluentTextField @bind-Value="joinRequest.JoinCode"
                                 Id="joinCode"
                                 Placeholder="Enter 6-character join code"
                                 Maxlength="10"
                                 Style="width: 100%;"
                                 Appearance="FluentInputAppearance.Outline"
                                 Required="true" />
                <ValidationMessage For="@(() => joinRequest.JoinCode)" />
            </div>

            <div class="form-group">
                <FluentLabel For="displayName" Style="margin-bottom: 8px;">
                    Display Name *
                </FluentLabel>
                <FluentTextField @bind-Value="joinRequest.DisplayName"
                                 Id="displayName"
                                 Placeholder="Enter your name as it should appear"
                                 Maxlength="50"
                                 Style="width: 100%;"
                                 Appearance="FluentInputAppearance.Outline"
                                 Required="true" />
                <ValidationMessage For="@(() => joinRequest.DisplayName)" />
                <FluentLabel Style="font-size: 12px; color: #666; margin-top: 4px;">
                    This name will be visible to other participants
                </FluentLabel>
            </div>

            <div class="form-actions">
                <FluentButton Type="ButtonType.Submit"
                              Appearance="Appearance.Accent"
                              Loading="@isJoining"
                              Disabled="@isJoining"
                              Style="width: 100%; min-height: 48px;">
                    @if (isJoining)
                    {
                        <span>Joining Auction...</span>
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size16.PersonAdd())" Style="margin-right: 8px;" />
                        <span>Join Auction</span>
                    }
                </FluentButton>
            </div>
        </EditForm>

        <div class="join-help">
            <FluentLabel Style="font-size: 14px; color: #666; text-align: center;">
                Need help? Contact your auction master for the join code.
            </FluentLabel>
        </div>
    </div>
</div>

@code {
    private JoinAuctionRequest joinRequest = new();
    private bool isJoining = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if user already has a session
        await CheckExistingSession();
    }

    private async Task CheckExistingSession()
    {
        try
        {
            var sessionJson = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "auctionSession");
            if (!string.IsNullOrEmpty(sessionJson))
            {
                var session = System.Text.Json.JsonSerializer.Deserialize<UserSession>(sessionJson);
                if (session != null && !string.IsNullOrEmpty(session.SessionToken))
                {
                    // Try to validate existing session
                    var isValid = await ValidateExistingSession(session);
                    if (isValid)
                    {
                        // Redirect to dashboard
                        Navigation.NavigateTo($"/auction/{session.AuctionId}/dashboard");
                        return;
                    }
                    else
                    {
                        // Clear invalid session
                        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "auctionSession");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking existing session: {ex.Message}");
            // Continue with join flow
        }
    }

    private async Task<bool> ValidateExistingSession(UserSession session)
    {
        try
        {
            Http.DefaultRequestHeaders.Remove("X-Auction-Token");
            Http.DefaultRequestHeaders.Add("X-Auction-Token", session.SessionToken);

            var response = await Http.GetAsync($"/api/auction/{session.AuctionId}/validate-session");
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    private async Task HandleJoinAuction()
    {
        if (isJoining) return;

        try
        {
            isJoining = true;
            errorMessage = string.Empty;
            StateHasChanged();

            // Clean up the inputs
            joinRequest.JoinCode = joinRequest.JoinCode?.Trim().ToUpperInvariant() ?? string.Empty;
            joinRequest.DisplayName = joinRequest.DisplayName?.Trim() ?? string.Empty;

            var response = await Http.PostAsJsonAsync("/api/auction/join", joinRequest);

            if (response.IsSuccessStatusCode)
            {
                var joinResponse = await response.Content.ReadFromJsonAsync<JoinAuctionResponse>();
                if (joinResponse != null)
                {
                    // Store session in localStorage
                    var session = new UserSession
                    {
                        UserId = joinResponse.UserId,
                        AuctionId = joinResponse.AuctionId,
                        DisplayName = joinResponse.DisplayName,
                        SessionToken = joinResponse.SessionToken,
                        JoinedDate = DateTime.UtcNow
                    };

                    var sessionJson = System.Text.Json.JsonSerializer.Serialize(session);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "auctionSession", sessionJson);

                    // Redirect to dashboard
                    Navigation.NavigateTo($"/auction/{joinResponse.AuctionId}/dashboard");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = response.StatusCode switch
                {
                    System.Net.HttpStatusCode.NotFound => "Join code not found. Please check the code and try again.",
                    System.Net.HttpStatusCode.Conflict => "This display name is already taken in this auction. Please choose a different name.",
                    System.Net.HttpStatusCode.BadRequest => "The auction is full or no longer accepting participants.",
                    _ => $"Unable to join auction: {error}"
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error joining auction: {ex.Message}";
            Console.WriteLine($"Join auction error: {ex}");
        }
        finally
        {
            isJoining = false;
            StateHasChanged();
        }
    }

    private class JoinAuctionRequest
    {
        [Required(ErrorMessage = "Join code is required")]
        [MinLength(3, ErrorMessage = "Join code must be at least 3 characters")]
        [MaxLength(10, ErrorMessage = "Join code cannot exceed 10 characters")]
        public string JoinCode { get; set; } = string.Empty;

        [Required(ErrorMessage = "Display name is required")]
        [MinLength(2, ErrorMessage = "Display name must be at least 2 characters")]
        [MaxLength(50, ErrorMessage = "Display name cannot exceed 50 characters")]
        public string DisplayName { get; set; } = string.Empty;
    }

    private class JoinAuctionResponse
    {
        public int UserId { get; set; }
        public int AuctionId { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public string SessionToken { get; set; } = string.Empty;
        public string AuctionName { get; set; } = string.Empty;
    }

    private class UserSession
    {
        public int UserId { get; set; }
        public int AuctionId { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public string SessionToken { get; set; } = string.Empty;
        public DateTime JoinedDate { get; set; }
    }
}

<style>
    .join-auction-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: calc(100vh - 200px);
        padding: 40px 20px;
    }

    .join-card {
        background: white;
        border-radius: 12px;
        border: 1px solid #e1e1e1;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        padding: 48px;
        width: 100%;
        max-width: 480px;
    }

    .join-header {
        text-align: center;
        margin-bottom: 32px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-actions {
        margin-top: 32px;
        margin-bottom: 24px;
    }

    .join-help {
        text-align: center;
        padding-top: 16px;
        border-top: 1px solid #f0f0f0;
    }

    .validation-message {
        color: #d13438;
        font-size: 12px;
        margin-top: 4px;
    }
</style>