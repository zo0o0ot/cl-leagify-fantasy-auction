@using System.Net.Http.Json
@using LeagifyFantasyAuction.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="roster-config-step">
    <!-- Step Header -->
    <div class="step-header">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
            <FluentLabel Typo="Typography.Subject">Configure Roster Positions</FluentLabel>
            <FluentLabel Style="color: #666;">
                Define the structure of fantasy teams for this auction. Use positions from your imported schools or create custom positions.
            </FluentLabel>
        </FluentStack>
    </div>

    <div class="step-body">
        @if (isLoading)
        {
            <div class="loading-section">
                <FluentProgressRing />
                <FluentLabel>Loading roster configuration...</FluentLabel>
            </div>
        }
        else
        {
            <div class="roster-config-container">
                
                <!-- Available Positions Context -->
                @if (availablePositions.Any())
                {
                    <FluentCard Style="padding: 20px; background-color: #e8f5e8; border: 1px solid #28a745; margin-bottom: 24px;">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                            <FluentLabel Weight="FontWeight.Bold" Style="color: #155724;">
                                Available Positions from Imported Schools
                            </FluentLabel>
                            <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="8">
                                @foreach (var position in availablePositions)
                                {
                                    <FluentBadge Fill="someValue" BackgroundColor="#28a745" Color="white" Style="margin: 2px;">
                                        @position
                                    </FluentBadge>
                                }
                            </FluentStack>
                            <FluentLabel Style="color: #666; font-size: 0.9em;">
                                These positions are available from your CSV import and can be used to create roster slots.
                            </FluentLabel>
                        </FluentStack>
                    </FluentCard>
                }

                <!-- Add New Position Section -->
                <FluentCard Style="background-color: #f8f9fa; border: 1px solid #dee2e6; margin-bottom: 24px; overflow: visible;">
                    <div style="padding: 20px; overflow: visible;">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                            <FluentLabel Weight="FontWeight.Bold">Add New Roster Position</FluentLabel>
                            
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="16" Wrap="true">
                                <div style="flex: 1; min-width: 250px; position: relative; z-index: 100;">
                                    @if (availablePositions.Any())
                                    {
                                        <FluentSelect @bind-Value="newPosition.PositionName"
                                                      Label="Position Name"
                                                      Items="@GetPositionOptions()"
                                                      OptionText="@(item => item)"
                                                      OptionValue="@(item => item)"
                                                      Required="true" />
                                        
                                        @if (newPosition.PositionName == "Custom")
                                        {
                                            <FluentTextField @bind-Value="newPosition.CustomPositionName" 
                                                             Label="Custom Position Name" 
                                                             Placeholder="Enter custom position name"
                                                             Style="margin-top: 8px;"
                                                             Required="true" />
                                        }
                                    }
                                    else
                                    {
                                        <FluentTextField @bind-Value="newPosition.PositionName" 
                                                         Label="Position Name" 
                                                         Placeholder="e.g., Power Conference, SEC, Flex"
                                                         Required="true" />
                                    }
                                </div>
                                
                                <div style="width: 140px;">
                                    <FluentNumberField @bind-Value="newPosition.SlotsPerTeam" 
                                                       Label="Slots per Team" 
                                                       Min="1" 
                                                       Max="10"
                                                       Required="true" />
                                </div>
                                
                                <div style="width: 120px;">
                                    <FluentLabel Style="margin-bottom: 4px;">Color</FluentLabel>
                                    <input type="color" @bind="newPosition.ColorCode" 
                                           style="width: 100%; height: 32px; border: 1px solid #ccc; border-radius: 4px;" />
                                </div>
                            </FluentStack>
                            
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" VerticalAlignment="VerticalAlignment.Center">
                                <FluentCheckbox @bind-Value="newPosition.IsFlexPosition" Label="Flex Position" />
                                <FluentLabel Style="color: #666; font-size: 0.9em;">(accepts any school type)</FluentLabel>
                            </FluentStack>
                            
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                                <FluentButton Appearance="Appearance.Accent" 
                                              OnClick="@AddRosterPosition"
                                              Disabled="@(IsAddPositionDisabled())"
                                              Loading="isAddingPosition">
                                    Add Position
                                </FluentButton>
                            </FluentStack>
                        </FluentStack>
                    </div>
                </FluentCard>
                
                <!-- Current Positions List -->
                @if (rosterPositions.Any())
                {
                    <FluentCard Style="margin-bottom: 24px;">
                        <div style="padding: 20px;">
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                                <FluentLabel Weight="FontWeight.Bold">Current Roster Configuration</FluentLabel>
                                
                                <div style="border: 1px solid #dee2e6; border-radius: 8px; overflow: hidden;">
                                    @foreach (var position in rosterPositions.OrderBy(p => p.DisplayOrder))
                                    {
                                        <div style="@($"padding: 20px; border-bottom: 1px solid #eee; background-color: {(string.IsNullOrEmpty(position.ColorCode) ? "#0078d4" : position.ColorCode)}20; {(IsEditing(position.RosterPositionId) ? "border-left: 4px solid #0078d4;" : "")}")"
                                             @key="position.RosterPositionId">
                                            @if (IsEditing(position.RosterPositionId))
                                            {
                                                <!-- Edit Mode -->
                                                <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                                                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16" Wrap="true">
                                                        <!-- Color Swatch -->
                                                        <div style="width: 120px;">
                                                            <FluentLabel Style="margin-bottom: 4px; font-size: 12px; color: #666;">Color</FluentLabel>
                                                            <input type="color" @bind="position.ColorCode" 
                                                                   style="width: 100%; height: 32px; border: 1px solid #ccc; border-radius: 4px;" />
                                                        </div>
                                                        
                                                        <!-- Position Name -->
                                                        <div style="flex: 1; min-width: 200px;">
                                                            <FluentTextField @bind-Value="position.PositionName" 
                                                                             Label="Position Name" 
                                                                             Required="true" />
                                                        </div>
                                                        
                                                        <!-- Slots per Team -->
                                                        <div style="width: 140px;">
                                                            <FluentNumberField @bind-Value="position.SlotsPerTeam" 
                                                                               Label="Slots per Team" 
                                                                               Min="1" 
                                                                               Max="10"
                                                                               Required="true" />
                                                        </div>
                                                        
                                                        <!-- Flex Position Toggle -->
                                                        <div style="width: 120px;">
                                                            <FluentLabel Style="margin-bottom: 4px; font-size: 12px; color: #666;">Flex Position</FluentLabel>
                                                            <FluentSwitch @bind-Value="position.IsFlexPosition" />
                                                        </div>
                                                    </FluentStack>
                                                    
                                                    <!-- Action Buttons for Edit Mode -->
                                                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                                                        <FluentButton Appearance="Appearance.Accent" 
                                                                      IconStart="@(new Icons.Regular.Size16.Save())"
                                                                      OnClick="@(() => SaveEdit(position))"
                                                                      Loading="@IsSaving(position.RosterPositionId)">
                                                            Save
                                                        </FluentButton>
                                                        <FluentButton Appearance="Appearance.Neutral" 
                                                                      IconStart="@(new Icons.Regular.Size16.Dismiss())"
                                                                      OnClick="@(() => CancelEdit(position))">
                                                            Cancel
                                                        </FluentButton>
                                                    </FluentStack>
                                                </FluentStack>
                                            }
                                            else
                                            {
                                                <!-- View Mode -->
                                                <div style="display: flex; align-items: center; gap: 20px; width: 100%;">
                                                    <div style="@($"width: 32px; height: 32px; background-color: {(string.IsNullOrEmpty(position.ColorCode) ? "#0078d4" : position.ColorCode)}; border-radius: 6px; border: 1px solid #ccc; cursor: pointer; flex-shrink: 0;")"
                                                         @onclick="@(() => StartEdit(position))"
                                                         title="Click to edit"></div>
                                                    <div style="flex: 1; cursor: pointer; min-width: 0; overflow: hidden;"
                                                         @onclick="@(() => StartEdit(position))">
                                                        <div style="font-size: 18px; font-weight: 600; margin-bottom: 4px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@position.PositionName</div>
                                                        <div style="font-size: 14px; color: #666; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                            @position.SlotsPerTeam slot@(position.SlotsPerTeam != 1 ? "s" : "") per team
                                                            @if (position.IsFlexPosition) { <text> • Flex Position</text> }
                                                        </div>
                                                    </div>
                                                    
                                                    <div style="display: flex; gap: 6px; flex-shrink: 0; align-items: center;">
                                                        <FluentButton Appearance="Appearance.Neutral" 
                                                                      IconStart="@(new Icons.Regular.Size16.Edit())"
                                                                      OnClick="@(() => StartEdit(position))"
                                                                      Title="Edit"
                                                                      Style="min-width: 36px; padding: 6px;" />
                                                        <FluentButton Appearance="Appearance.Neutral" 
                                                                      IconStart="@(new Icons.Regular.Size16.ArrowUp())"
                                                                      OnClick="@(() => MovePositionUp(position))"
                                                                      Disabled="@(rosterPositions.OrderBy(p => p.DisplayOrder).First() == position)"
                                                                      Title="Move up"
                                                                      Style="min-width: 36px; padding: 6px;" />
                                                        <FluentButton Appearance="Appearance.Neutral" 
                                                                      IconStart="@(new Icons.Regular.Size16.ArrowDown())"
                                                                      OnClick="@(() => MovePositionDown(position))"
                                                                      Disabled="@(rosterPositions.OrderBy(p => p.DisplayOrder).Last() == position)"
                                                                      Title="Move down"
                                                                      Style="min-width: 36px; padding: 6px;" />
                                                        <FluentButton Appearance="Appearance.Neutral" 
                                                                      IconStart="@(new Icons.Regular.Size16.Delete())"
                                                                      OnClick="@(() => RemoveRosterPosition(position))"
                                                                      Loading="@(deletingPositionId == position.RosterPositionId)"
                                                                      Title="Delete"
                                                                      Style="min-width: 36px; padding: 6px;" />
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                                
                                <!-- Roster Summary -->
                                <FluentCard Style="background-color: #e3f2fd; border: 1px solid #2196f3;">
                                    <div style="padding: 16px;">
                                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                                            <FluentLabel Weight="FontWeight.Bold" Style="color: #1976d2;">Team Composition Summary</FluentLabel>
                                            <FluentLabel Style="color: #1976d2;">
                                                Each team will have <strong>@rosterPositions.Sum(p => p.SlotsPerTeam) schools</strong> total
                                                (@rosterPositions.Count(p => !p.IsFlexPosition) specific position@(rosterPositions.Count(p => !p.IsFlexPosition) != 1 ? "s" : ""), 
                                                 @rosterPositions.Where(p => p.IsFlexPosition).Sum(p => p.SlotsPerTeam) flex slot@(rosterPositions.Where(p => p.IsFlexPosition).Sum(p => p.SlotsPerTeam) != 1 ? "s" : ""))
                                            </FluentLabel>
                                        </FluentStack>
                                    </div>
                                </FluentCard>
                            </FluentStack>
                        </div>
                    </FluentCard>
                }
                else
                {
                    <FluentCard Style="padding: 32px; text-align: center;">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size48.Settings())" 
                                        Style="color: #666; width: 64px; height: 64px;" />
                            <FluentLabel Style="color: #666;">No roster positions configured yet. Add positions above to define your team structure.</FluentLabel>
                        </FluentStack>
                    </FluentCard>
                }

                <!-- Continue Button -->
                @if (rosterPositions.Any())
                {
                    <div style="text-align: center; padding-top: 24px;">
                        <FluentButton Appearance="Appearance.Accent" 
                                      OnClick="@CompleteRosterConfig"
                                      IconEnd="@(new Icons.Regular.Size16.ArrowRight())">
                            Continue to Auction Configuration
                        </FluentButton>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int AuctionId { get; set; }
    [Parameter] public AuctionDto? Auction { get; set; }
    [Parameter] public EventCallback OnCompleted { get; set; }

    private bool isLoading = true;
    private bool isAddingPosition = false;
    private int? deletingPositionId = null;
    private List<RosterPositionDto> rosterPositions = new();
    private List<string> availablePositions = new();
    private NewRosterPosition newPosition = new();
    
    // Inline editing state
    private Dictionary<int, bool> editingStates = new();
    private Dictionary<int, RosterPositionDto> editingBackups = new();
    private Dictionary<int, bool> savingStates = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRosterPositions();
        await LoadAvailablePositions();
        
        // Auto-create roster positions if none exist and we have available positions
        if (!rosterPositions.Any() && availablePositions.Any())
        {
            await AutoCreateRosterPositions();
        }
        
        ResetNewPosition(); // Initialize with default position after loading available positions
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadRosterPositions()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetAsync($"/api/management/auctions/{AuctionId}/roster-positions");
            if (response.IsSuccessStatusCode)
            {
                var positions = await response.Content.ReadFromJsonAsync<List<RosterPositionDto>>();
                rosterPositions = positions ?? new List<RosterPositionDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading roster positions: {ex.Message}");
        }
    }

    private async Task LoadAvailablePositions()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetAsync($"/api/management/auctions/{AuctionId}/available-positions");
            if (response.IsSuccessStatusCode)
            {
                var positions = await response.Content.ReadFromJsonAsync<List<string>>();
                availablePositions = positions ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available positions: {ex.Message}");
        }
    }

    private async Task AddRosterPosition()
    {
        var actualPositionName = newPosition.PositionName == "Custom" 
            ? newPosition.CustomPositionName.Trim() 
            : newPosition.PositionName.Trim();
            
        if (string.IsNullOrWhiteSpace(actualPositionName) || newPosition.SlotsPerTeam <= 0) return;
        
        try
        {
            isAddingPosition = true;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var finalPositionName = newPosition.PositionName == "Custom" 
                ? newPosition.CustomPositionName.Trim() 
                : newPosition.PositionName.Trim();

            var request = new CreateRosterPositionRequest
            {
                AuctionId = AuctionId,
                PositionName = finalPositionName,
                SlotsPerTeam = newPosition.SlotsPerTeam,
                ColorCode = newPosition.ColorCode,
                IsFlexPosition = newPosition.IsFlexPosition,
                DisplayOrder = rosterPositions.Count + 1
            };

            var response = await Http.PostAsJsonAsync("/api/management/roster-positions", request);
            if (response.IsSuccessStatusCode)
            {
                await LoadRosterPositions();
                ResetNewPosition();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error adding roster position: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding roster position: {ex.Message}");
        }
        finally
        {
            isAddingPosition = false;
            StateHasChanged();
        }
    }

    private async Task RemoveRosterPosition(RosterPositionDto position)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the '{position.PositionName}' position?");
        if (!confirmed) return;

        try
        {
            deletingPositionId = position.RosterPositionId;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.DeleteAsync($"/api/management/roster-positions/{position.RosterPositionId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadRosterPositions();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error removing roster position: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error removing roster position: {ex.Message}");
        }
        finally
        {
            deletingPositionId = null;
            StateHasChanged();
        }
    }

    private async Task MovePositionUp(RosterPositionDto position)
    {
        await ReorderPosition(position, -1);
    }

    private async Task MovePositionDown(RosterPositionDto position)
    {
        await ReorderPosition(position, 1);
    }

    private async Task ReorderPosition(RosterPositionDto position, int direction)
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var request = new ReorderPositionRequest
            {
                RosterPositionId = position.RosterPositionId,
                Direction = direction
            };

            var response = await Http.PostAsJsonAsync($"/api/management/roster-positions/{position.RosterPositionId}/reorder", request);
            if (response.IsSuccessStatusCode)
            {
                await LoadRosterPositions();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error reordering positions: {ex.Message}");
        }
    }

    private void ResetNewPosition()
    {
        // Always ensure we have a valid default position name
        var defaultPositionName = "Flex"; // Start with safe default
        
        if (availablePositions.Any())
        {
            defaultPositionName = availablePositions.First();
        }
        
        // Use next color in palette based on current roster positions count
        var colorIndex = rosterPositions.Count;
        
        newPosition = new NewRosterPosition
        {
            PositionName = defaultPositionName,
            ColorCode = GetDefaultColor(colorIndex),
            SlotsPerTeam = 1
        };
        
        // Force UI update
        StateHasChanged();
    }

    private List<string> GetPositionOptions()
    {
        var options = new List<string>();
        options.AddRange(availablePositions);
        
        if (!options.Contains("Flex"))
            options.Add("Flex");
            
        options.Add("Custom");
        
        return options;
    }

    private bool IsAddPositionDisabled()
    {
        if (newPosition.SlotsPerTeam <= 0) return true;
        if (string.IsNullOrWhiteSpace(newPosition.PositionName)) return true;
        if (newPosition.PositionName == "Custom" && string.IsNullOrWhiteSpace(newPosition.CustomPositionName))
            return true;
        return false;
    }

    // Color palette for auto-generated roster positions
    private static readonly string[] DefaultColors = {
        "#0078d4", // Blue (Microsoft primary)
        "#d13438", // Red
        "#107c10", // Green
        "#ff8c00", // Orange
        "#5c2d91", // Purple
        "#008080", // Teal
        "#e81123", // Bright Red
        "#00bcf2", // Cyan
        "#bad80a", // Lime
        "#f7630c"  // Dark Orange
    };

    private string GetDefaultColor(int index)
    {
        return DefaultColors[index % DefaultColors.Length];
    }

    private async Task AutoCreateRosterPositions()
    {
        if (!availablePositions.Any()) return;
        
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Create one position for each available position type
            for (int i = 0; i < availablePositions.Count; i++)
            {
                var position = availablePositions[i];
                var createRequest = new
                {
                    AuctionId = AuctionId,
                    PositionName = position,
                    SlotsPerTeam = 1, // Default to 1 slot per team
                    ColorCode = GetDefaultColor(i),
                    IsFlexPosition = position.Equals("Flex", StringComparison.OrdinalIgnoreCase)
                };

                var response = await Http.PostAsJsonAsync("/api/management/roster-positions", createRequest);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Failed to auto-create position '{position}': {await response.Content.ReadAsStringAsync()}");
                }
            }

            // Reload positions after auto-creation
            await LoadRosterPositions();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error auto-creating roster positions: {ex.Message}");
        }
    }

    // Inline editing methods
    private void StartEdit(RosterPositionDto position)
    {
        editingStates[position.RosterPositionId] = true;
        editingBackups[position.RosterPositionId] = new RosterPositionDto
        {
            RosterPositionId = position.RosterPositionId,
            AuctionId = position.AuctionId,
            PositionName = position.PositionName,
            SlotsPerTeam = position.SlotsPerTeam,
            ColorCode = position.ColorCode,
            DisplayOrder = position.DisplayOrder,
            IsFlexPosition = position.IsFlexPosition
        };
        StateHasChanged();
    }

    private void CancelEdit(RosterPositionDto position)
    {
        if (editingBackups.ContainsKey(position.RosterPositionId))
        {
            var backup = editingBackups[position.RosterPositionId];
            position.PositionName = backup.PositionName;
            position.SlotsPerTeam = backup.SlotsPerTeam;
            position.ColorCode = backup.ColorCode;
            position.IsFlexPosition = backup.IsFlexPosition;
            
            editingBackups.Remove(position.RosterPositionId);
        }
        editingStates[position.RosterPositionId] = false;
        StateHasChanged();
    }

    private async Task SaveEdit(RosterPositionDto position)
    {
        try
        {
            savingStates[position.RosterPositionId] = true;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var updateRequest = new
            {
                PositionName = position.PositionName,
                SlotsPerTeam = position.SlotsPerTeam,
                ColorCode = position.ColorCode,
                IsFlexPosition = position.IsFlexPosition
            };

            var response = await Http.PutAsJsonAsync($"/api/management/roster-positions/{position.RosterPositionId}", updateRequest);
            if (response.IsSuccessStatusCode)
            {
                editingStates[position.RosterPositionId] = false;
                editingBackups.Remove(position.RosterPositionId);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to update position: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating position: {ex.Message}");
        }
        finally
        {
            savingStates[position.RosterPositionId] = false;
            StateHasChanged();
        }
    }

    private bool IsEditing(int positionId) => editingStates.GetValueOrDefault(positionId, false);
    private bool IsSaving(int positionId) => savingStates.GetValueOrDefault(positionId, false);

    private async Task CompleteRosterConfig()
    {
        await OnCompleted.InvokeAsync();
    }

    // DTOs
    public class RosterPositionDto
    {
        public int RosterPositionId { get; set; }
        public int AuctionId { get; set; }
        public string PositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; }
        public string ColorCode { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsFlexPosition { get; set; }
    }

    public class NewRosterPosition
    {
        public string PositionName { get; set; } = string.Empty;
        public string CustomPositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; } = 1;
        public string ColorCode { get; set; } = "#0078d4";
        public bool IsFlexPosition { get; set; } = false;
    }

    public class CreateRosterPositionRequest
    {
        public int AuctionId { get; set; }
        public string PositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; }
        public string ColorCode { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsFlexPosition { get; set; }
    }

    public class ReorderPositionRequest
    {
        public int RosterPositionId { get; set; }
        public int Direction { get; set; }
    }

}

<style>
    .roster-config-step {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .step-header {
        padding: 24px 24px 16px 24px;
        border-bottom: 1px solid #e1e1e1;
        background: #f8f9fa;
    }

    .step-body {
        padding: 24px;
        flex: 1;
        overflow-y: auto;
    }

    .roster-config-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .loading-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        gap: 16px;
    }
</style>