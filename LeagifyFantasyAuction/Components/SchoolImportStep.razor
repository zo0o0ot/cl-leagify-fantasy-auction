@using System.Net.Http.Json
@using LeagifyFantasyAuction.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="school-import-step">
    <!-- Step Header -->
    <div class="step-header">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
            <FluentLabel Typo="Typography.Subject">Import School Data</FluentLabel>
            <FluentLabel Style="color: #666;">
                Upload a CSV file containing school data for this auction. This will populate the available schools and their positions.
            </FluentLabel>
        </FluentStack>
    </div>

    <div class="step-body">
        @if (!showSchoolMatching)
        {
            <!-- Upload Section -->
            <FluentCard Style="padding: 32px; text-align: center;">
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="24" HorizontalAlignment="HorizontalAlignment.Center">
                    
                    <FluentIcon Value="@(new Icons.Regular.Size48.Document())" 
                                Style="color: #0078d4; width: 64px; height: 64px;" />
                    
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" HorizontalAlignment="HorizontalAlignment.Center">
                        <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                            Select CSV File to Upload
                        </FluentLabel>
                        <FluentLabel Style="color: #666;">
                            Supported format: CSV files with school data including Name, Conference, and LeagifyPosition columns
                        </FluentLabel>
                    </FluentStack>
                    
                    <div style="border: 2px dashed #0078d4; border-radius: 8px; padding: 24px; background-color: #f8f9fa; max-width: 400px;">
                        <InputFile OnChange="HandleFileUpload" 
                                   accept=".csv" 
                                   style="width: 100%; padding: 8px;" />
                    </div>
                    
                    @if (isCsvUploading)
                    {
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                            <FluentProgressRing Style="width: 24px; height: 24px;" />
                            <FluentLabel>Processing CSV file...</FluentLabel>
                        </FluentStack>
                    }
                    
                    @if (!string.IsNullOrEmpty(csvUploadMessage))
                    {
                        <FluentMessageBar Intent="@(csvUploadMessage.Contains("Error") ? MessageIntent.Error : MessageIntent.Info)"
                                          Style="max-width: 600px;">
                            @csvUploadMessage
                        </FluentMessageBar>
                    }
                </FluentStack>
            </FluentCard>
        }
        else
        {
            <!-- School Matching Interface -->
            <div class="matching-container">
                
                <!-- Summary Statistics -->
                <FluentCard Style="padding: 20px; background-color: #f8f9fa; border: 2px solid #0078d4; margin-bottom: 24px;">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                        <FluentLabel Weight="FontWeight.Bold" Typo="Typography.Body">Import Summary</FluentLabel>
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="32">
                            <div style="text-align: center;">
                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #28a745; line-height: 1;">
                                    @schoolMatches.Count(m => m.MatchType == SchoolMatchType.Exact)
                                </FluentLabel>
                                <FluentLabel Style="font-size: 14px; color: #666;">Exact Matches</FluentLabel>
                            </div>
                            <div style="text-align: center;">
                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #ffc107; line-height: 1;">
                                    @schoolMatches.Count(m => m.MatchType == SchoolMatchType.Fuzzy)
                                </FluentLabel>
                                <FluentLabel Style="font-size: 14px; color: #666;">Fuzzy Matches</FluentLabel>
                            </div>
                            <div style="text-align: center;">
                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #dc3545; line-height: 1;">
                                    @schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch)
                                </FluentLabel>
                                <FluentLabel Style="font-size: 14px; color: #666;">New Schools</FluentLabel>
                            </div>
                            <div style="text-align: center;">
                                <FluentLabel Style="font-size: 32px; font-weight: 700; color: #6c757d; line-height: 1;">
                                    @schoolMatches.Count
                                </FluentLabel>
                                <FluentLabel Style="font-size: 14px; color: #666;">Total Schools</FluentLabel>
                            </div>
                        </FluentStack>
                        
                        @if (schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch) > 0)
                        {
                            <FluentMessageBar Intent="MessageIntent.Info" Style="margin-top: 12px;">
                                <strong>@schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch) new schools</strong> will be created and added to the database.
                            </FluentMessageBar>
                        }
                    </FluentStack>
                </FluentCard>

                <!-- Filter Buttons -->
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" Style="margin-bottom: 16px;">
                    <FluentButton Appearance="@(currentFilter == MatchFilter.All ? Appearance.Accent : Appearance.Neutral)"
                                  OnClick="@(() => SetMatchFilter(MatchFilter.All))">
                        All (@schoolMatches.Count)
                    </FluentButton>
                    <FluentButton Appearance="@(currentFilter == MatchFilter.Exact ? Appearance.Accent : Appearance.Neutral)"
                                  OnClick="@(() => SetMatchFilter(MatchFilter.Exact))">
                        Exact (@schoolMatches.Count(m => m.MatchType == SchoolMatchType.Exact))
                    </FluentButton>
                    <FluentButton Appearance="@(currentFilter == MatchFilter.Fuzzy ? Appearance.Accent : Appearance.Neutral)"
                                  OnClick="@(() => SetMatchFilter(MatchFilter.Fuzzy))">
                        Fuzzy (@schoolMatches.Count(m => m.MatchType == SchoolMatchType.Fuzzy))
                    </FluentButton>
                    <FluentButton Appearance="@(currentFilter == MatchFilter.New ? Appearance.Accent : Appearance.Neutral)"
                                  OnClick="@(() => SetMatchFilter(MatchFilter.New))">
                        New (@schoolMatches.Count(m => m.MatchType == SchoolMatchType.NoMatch))
                    </FluentButton>
                </FluentStack>

                <!-- School List -->
                <div style="max-height: 500px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; margin-bottom: 24px;">
                    @foreach (var match in GetFilteredMatches())
                    {
                        <FluentCard Style="@($"margin: 0; padding: 16px; border-radius: 0; border-bottom: 1px solid #eee; background-color: {GetMatchCardColor(match)};")">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16">
                                <FluentStack Orientation="Orientation.Vertical" Style="flex: 1;" VerticalGap="4">
                                    <FluentLabel Weight="FontWeight.Bold" Style="font-size: 16px;">@match.CsvData.Name</FluentLabel>
                                    <FluentLabel Style="font-size: 14px; color: #666;">@match.CsvData.Conference • @match.CsvData.LeagifyPosition</FluentLabel>
                                    @if (match.MatchType == SchoolMatchType.Fuzzy && match.MatchedSchool != null)
                                    {
                                        <FluentLabel Style="font-size: 13px; color: #495057;">→ Matches: <strong>@match.MatchedSchool.Name</strong></FluentLabel>
                                    }
                                </FluentStack>
                                
                                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                                    @if (match.MatchType == SchoolMatchType.Exact)
                                    {
                                        <FluentBadge Fill="someValue" BackgroundColor="#28a745" Color="white">EXACT</FluentBadge>
                                    }
                                    else if (match.MatchType == SchoolMatchType.Fuzzy)
                                    {
                                        <FluentBadge Fill="someValue" BackgroundColor="#ffc107" Color="black">FUZZY</FluentBadge>
                                        <FluentLabel Style="font-size: 12px; color: #666;">@(Math.Round(match.Confidence * 100))%</FluentLabel>
                                    }
                                    else
                                    {
                                        <FluentBadge Fill="someValue" BackgroundColor="#dc3545" Color="white">NEW</FluentBadge>
                                    }
                                </FluentStack>
                            </FluentStack>
                        </FluentCard>
                    }
                </div>

                <!-- Action Buttons -->
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" HorizontalAlignment="HorizontalAlignment.Center">
                    <FluentButton Appearance="Appearance.Neutral" 
                                  OnClick="@CancelImport">
                        Cancel Import
                    </FluentButton>
                    
                    <FluentButton Appearance="Appearance.Accent" 
                                  OnClick="@ConfirmImport"
                                  Loading="@isConfirming">
                        Confirm Import (@schoolMatches.Count schools)
                    </FluentButton>
                </FluentStack>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int AuctionId { get; set; }
    [Parameter] public AuctionDto? Auction { get; set; }
    [Parameter] public EventCallback OnCompleted { get; set; }

    private bool showSchoolMatching = false;
    private bool isCsvUploading = false;
    private bool isConfirming = false;
    private string csvUploadMessage = "";
    private List<SchoolMatchPreview> schoolMatches = new();
    private MatchFilter currentFilter = MatchFilter.All;

    public enum MatchFilter
    {
        All, Exact, Fuzzy, New
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            isCsvUploading = true;
            csvUploadMessage = "";
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                csvUploadMessage = "Error: Authentication token missing";
                return;
            }

            // Read file content
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB limit
            using var reader = new StreamReader(stream);
            var csvContent = await reader.ReadToEndAsync();

            // Create multipart content
            using var content = new MultipartFormDataContent();
            var fileContent = new StringContent(csvContent);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            content.Add(fileContent, "csvFile", file.Name);

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsync($"/api/management/auctions/{AuctionId}/csv-import/preview", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuctionCsvPreviewResult>();
                if (result?.IsSuccess == true)
                {
                    schoolMatches = result.SchoolMatches ?? new List<SchoolMatchPreview>();
                    showSchoolMatching = true;
                    csvUploadMessage = $"Successfully processed {schoolMatches.Count} schools from CSV";
                }
                else
                {
                    csvUploadMessage = $"CSV processing failed: {string.Join(", ", result?.Errors ?? new List<string>())}";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                csvUploadMessage = $"Upload failed: {error}";
            }
        }
        catch (Exception ex)
        {
            csvUploadMessage = $"Error processing file: {ex.Message}";
        }
        finally
        {
            isCsvUploading = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmImport()
    {
        if (!schoolMatches.Any()) return;

        try
        {
            isConfirming = true;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            var confirmedMatches = schoolMatches.Select(m => new ConfirmedSchoolMatch
            {
                SchoolId = m.MatchedSchool?.SchoolId ?? 0,
                CsvData = m.CsvData,
                MatchType = m.MatchType
            }).ToList();

            var confirmRequest = new AuctionCsvConfirmRequest
            {
                AuctionId = AuctionId,
                ConfirmedMatches = confirmedMatches
            };

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.PostAsJsonAsync($"/api/management/auctions/{AuctionId}/csv-import/confirm", confirmRequest);

            if (response.IsSuccessStatusCode)
            {
                await OnCompleted.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                csvUploadMessage = $"Import failed: {error}";
            }
        }
        catch (Exception ex)
        {
            csvUploadMessage = $"Error confirming import: {ex.Message}";
        }
        finally
        {
            isConfirming = false;
            StateHasChanged();
        }
    }

    private void CancelImport()
    {
        showSchoolMatching = false;
        schoolMatches.Clear();
        csvUploadMessage = "";
        currentFilter = MatchFilter.All;
        StateHasChanged();
    }

    private void SetMatchFilter(MatchFilter filter)
    {
        currentFilter = filter;
        StateHasChanged();
    }

    private IEnumerable<SchoolMatchPreview> GetFilteredMatches()
    {
        return currentFilter switch
        {
            MatchFilter.Exact => schoolMatches.Where(m => m.MatchType == SchoolMatchType.Exact),
            MatchFilter.Fuzzy => schoolMatches.Where(m => m.MatchType == SchoolMatchType.Fuzzy),
            MatchFilter.New => schoolMatches.Where(m => m.MatchType == SchoolMatchType.NoMatch),
            _ => schoolMatches
        };
    }

    private string GetMatchCardColor(SchoolMatchPreview match)
    {
        return match.MatchType switch
        {
            SchoolMatchType.Exact => "#d4edda",
            SchoolMatchType.Fuzzy => "#fff3cd",
            SchoolMatchType.NoMatch => "#f8d7da",
            _ => "#ffffff"
        };
    }

    // DTOs (copied from existing implementation)
    public class AuctionCsvPreviewResult
    {
        public int AuctionId { get; set; }
        public bool IsSuccess { get; set; }
        public List<string> Errors { get; set; } = new();
        public List<SchoolMatchPreview> SchoolMatches { get; set; } = new();
        public int TotalSchools { get; set; }
        public int ExactMatches { get; set; }
        public int FuzzyMatches { get; set; }
        public int NoMatches { get; set; }
    }

    public class SchoolMatchPreview
    {
        public SchoolMatchType MatchType { get; set; }
        public double Confidence { get; set; }
        public SchoolDto? MatchedSchool { get; set; }
        public CsvSchoolData CsvData { get; set; } = new();
    }

    public class SchoolDto
    {
        public int SchoolId { get; set; }
        public string Name { get; set; } = "";
        public string LogoFileName { get; set; } = "";
    }

    public class CsvSchoolData
    {
        public string Name { get; set; } = "";
        public string Conference { get; set; } = "";
        public string LeagifyPosition { get; set; } = "";
        public decimal ProjectedPoints { get; set; }
        public int NumberOfProspects { get; set; }
        public decimal? SuggestedAuctionValue { get; set; }
        public decimal ProjectedPointsAboveAverage { get; set; }
        public decimal ProjectedPointsAboveReplacement { get; set; }
        public decimal AveragePointsForPosition { get; set; }
        public decimal ReplacementValueAverageForPosition { get; set; }
        public string? SchoolURL { get; set; }
        public string? LogoFileName { get; set; }
    }

    public class ConfirmedSchoolMatch
    {
        public int SchoolId { get; set; }
        public CsvSchoolData CsvData { get; set; } = new();
        public SchoolMatchType MatchType { get; set; }
    }

    public class AuctionCsvConfirmRequest
    {
        public int AuctionId { get; set; }
        public List<ConfirmedSchoolMatch> ConfirmedMatches { get; set; } = new();
    }

    public enum SchoolMatchType
    {
        Exact, Fuzzy, NoMatch
    }

}

<style>
    .school-import-step {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .step-header {
        padding: 24px 24px 16px 24px;
        border-bottom: 1px solid #e1e1e1;
        background: #f8f9fa;
    }

    .step-body {
        padding: 24px;
        flex: 1;
        overflow-y: auto;
    }

    .matching-container {
        max-width: 900px;
        margin: 0 auto;
    }
</style>