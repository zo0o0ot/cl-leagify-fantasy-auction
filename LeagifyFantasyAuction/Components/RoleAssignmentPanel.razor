@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="role-assignment-panel">
    <FluentCard>
        <div class="panel-header">
            <FluentLabel Typo="Typography.Subject">
                Participant Role Management
            </FluentLabel>
            <FluentLabel Style="color: #666; margin-top: 4px;">
                Assign roles and teams to auction participants
            </FluentLabel>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <FluentProgressRing />
                <FluentLabel>Loading participants...</FluentLabel>
            </div>
        }
        else if (participants.Any())
        {
            <FluentDataGrid Items="@participantsQueryable" GridTemplateColumns="2fr 2fr 1fr 2fr 1fr" Style="width: 100%;">
                <PropertyColumn Property="@(p => p.DisplayName)" Title="Display Name" Sortable="true" />
                
                <TemplateColumn Title="Current Roles">
                    <ChildContent Context="participant">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4" Wrap="true">
                            @if (participant.Roles.Any())
                            {
                                @foreach (var role in participant.Roles)
                                {
                                    <FluentBadge Appearance="@GetRoleAppearance(role.Role)" 
                                                 BackgroundColor="@GetRoleColor(role.Role)"
                                                 Color="white"
                                                 Style="font-size: 11px;">
                                        @GetRoleDisplayName(role.Role)
                                        @if (!string.IsNullOrEmpty(role.TeamName))
                                        {
                                            <span> - @role.TeamName</span>
                                        }
                                        <FluentButton Appearance="Appearance.Stealth"
                                                      IconStart="@(new Icons.Regular.Size12.Dismiss())"
                                                      Style="margin-left: 4px; min-width: auto; padding: 0 4px;"
                                                      OnClick="@(() => RemoveRole(participant.UserId, role.UserRoleId))"
                                                      Title="Remove this role" />
                                    </FluentBadge>
                                }
                            }
                            else
                            {
                                <FluentLabel Style="color: #666; font-style: italic; font-size: 12px;">
                                    No roles assigned
                                </FluentLabel>
                            }
                        </FluentStack>
                    </ChildContent>
                </TemplateColumn>

                <TemplateColumn Title="Status">
                    <ChildContent Context="participant">
                        <FluentBadge Appearance="@(participant.IsConnected ? Appearance.Accent : Appearance.Neutral)"
                                     BackgroundColor="@(participant.IsConnected ? "#28a745" : "#6c757d")"
                                     Color="white">
                            @(participant.IsConnected ? "Online" : "Offline")
                        </FluentBadge>
                        @if (participant.IsReconnectionPending)
                        {
                            <FluentBadge Appearance="Appearance.Neutral" BackgroundColor="#ffc107" Color="black" Style="margin-left: 4px;">
                                Reconnection Pending
                            </FluentBadge>
                        }
                    </ChildContent>
                </TemplateColumn>

                <TemplateColumn Title="Assign Role">
                    <ChildContent Context="participant">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                            <select @onchange="@(e => SetSelectedRole(participant.UserId, e.Value?.ToString() ?? string.Empty))"
                                    value="@GetSelectedRole(participant.UserId)"
                                    style="min-width: 120px; font-size: 12px; padding: 6px; border: 1px solid #ccc; border-radius: 4px;">
                                <option value="">Select role...</option>
                                @foreach (var role in roleOptions)
                                {
                                    <option value="@role">@role</option>
                                }
                            </select>
                            
                            @if (GetSelectedRole(participant.UserId) == "TeamCoach" || GetSelectedRole(participant.UserId) == "ProxyCoach")
                            {
                                <select @onchange="@(e => SetSelectedTeamIdString(participant.UserId, e.Value?.ToString() ?? string.Empty))"
                                        value="@GetSelectedTeamIdString(participant.UserId)"
                                        style="min-width: 100px; font-size: 12px; padding: 6px; border: 1px solid #ccc; border-radius: 4px;">
                                    <option value="">Select team...</option>
                                    @foreach (var teamId in availableTeamIds)
                                    {
                                        <option value="@teamId.ToString()">@GetTeamName(teamId)</option>
                                    }
                                </select>
                            }
                        </FluentStack>
                    </ChildContent>
                </TemplateColumn>

                <TemplateColumn Title="Actions">
                    <ChildContent Context="participant">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                            <FluentButton Appearance="Appearance.Accent"
                                          IconStart="@(new Icons.Regular.Size16.PersonAdd())"
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => AssignRole(participant.UserId))"
                                          Disabled="@(string.IsNullOrEmpty(GetSelectedRole(participant.UserId)))"
                                          Loading="@(assigningRoles.Contains(participant.UserId))">
                                Assign
                            </FluentButton>
                            
                            @if (!participant.IsConnected)
                            {
                                <FluentButton Appearance="Appearance.Stealth"
                                              IconStart="@(new Icons.Regular.Size16.PersonDelete())"
                                              Size="ButtonSize.Small"
                                              OnClick="@(() => DeleteUser(participant.UserId, participant.DisplayName))"
                                              Loading="@(deletingUsers.Contains(participant.UserId))"
                                              Title="Delete disconnected user">
                                    Delete
                                </FluentButton>
                            }
                        </FluentStack>
                    </ChildContent>
                </TemplateColumn>
            </FluentDataGrid>
        }
        else
        {
            <FluentMessageBar Intent="MessageIntent.Info">
                No participants have joined this auction yet.
            </FluentMessageBar>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <FluentMessageBar Intent="MessageIntent.Error" Style="margin-top: 16px;">
                @errorMessage
            </FluentMessageBar>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <FluentMessageBar Intent="MessageIntent.Success" Style="margin-top: 16px;">
                @successMessage
            </FluentMessageBar>
        }
    </FluentCard>
</div>

@code {
    [Parameter] public int AuctionId { get; set; }
    [Parameter] public EventCallback OnRoleAssigned { get; set; }

    private List<ParticipantDto> participants = new();
    private IQueryable<ParticipantDto> participantsQueryable => participants.AsQueryable();
    private List<TeamDto> availableTeams = new();
    private List<int> availableTeamIds => availableTeams.Select(t => t.TeamId).ToList();
    private List<string> availableTeamIdStrings => availableTeams.Select(t => t.TeamId.ToString()).ToList();
    
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    private readonly List<string> roleOptions = new() { "AuctionMaster", "TeamCoach", "ProxyCoach", "Viewer" };
    private readonly Dictionary<int, string> selectedRoles = new();
    private readonly Dictionary<int, int> selectedTeamIds = new();
    private readonly HashSet<int> assigningRoles = new();
    private readonly HashSet<int> deletingUsers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task RefreshData()
    {
        await LoadData();
        StateHasChanged();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Management authentication required";
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Load participants
            var participantsResponse = await Http.GetAsync($"/api/auction/{AuctionId}/participants");
            if (participantsResponse.IsSuccessStatusCode)
            {
                participants = await participantsResponse.Content.ReadFromJsonAsync<List<ParticipantDto>>() ?? new();
            }
            else
            {
                Console.WriteLine($"Failed to load participants: {participantsResponse.StatusCode}");
                errorMessage = $"Failed to load participants: {participantsResponse.StatusCode}";
            }

            // Load available teams (optional for now - teams will be created during auction setup)
            try 
            {
                var teamsResponse = await Http.GetAsync($"/api/management/auctions/{AuctionId}/teams");
                if (teamsResponse.IsSuccessStatusCode)
                {
                    var teamsData = await teamsResponse.Content.ReadFromJsonAsync<ManageTeamsResponse>();
                    availableTeams = teamsData?.Teams ?? new();
                }
                else
                {
                    // Teams endpoint doesn't exist yet - create placeholder teams for now
                    availableTeams = CreatePlaceholderTeams();
                }
            }
            catch
            {
                // If teams API fails, create placeholder teams
                availableTeams = CreatePlaceholderTeams();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Console.WriteLine($"Error loading role assignment data: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AssignRole(int userId)
    {
        if (!selectedRoles.TryGetValue(userId, out var role) || string.IsNullOrEmpty(role))
        {
            return;
        }

        try
        {
            assigningRoles.Add(userId);
            errorMessage = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Management authentication required";
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var request = new AssignRoleRequest
            {
                Role = role,
                TeamId = (role == "TeamCoach" || role == "ProxyCoach") && selectedTeamIds.TryGetValue(userId, out var teamId) ? teamId : null
            };

            var response = await Http.PostAsJsonAsync($"/api/management/auctions/{AuctionId}/users/{userId}/roles", request);
            
            if (response.IsSuccessStatusCode)
            {
                var participant = participants.FirstOrDefault(p => p.UserId == userId);
                if (participant != null)
                {
                    successMessage = $"Successfully assigned {GetRoleDisplayName(role)} to {participant.DisplayName}";
                }

                // Clear selections for this user
                selectedRoles.Remove(userId);
                selectedTeamIds.Remove(userId);

                // Refresh data to show updated roles
                await LoadData();
                
                // Notify parent component
                if (OnRoleAssigned.HasDelegate)
                {
                    await OnRoleAssigned.InvokeAsync();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to assign role: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error assigning role: {ex.Message}";
            Console.WriteLine($"Error assigning role: {ex}");
        }
        finally
        {
            assigningRoles.Remove(userId);
            StateHasChanged();
        }
    }

    private async Task RemoveRole(int userId, int userRoleId)
    {
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Management authentication required";
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.DeleteAsync($"/api/management/auctions/{AuctionId}/users/{userId}/roles/{userRoleId}");
            
            if (response.IsSuccessStatusCode)
            {
                var participant = participants.FirstOrDefault(p => p.UserId == userId);
                if (participant != null)
                {
                    successMessage = $"Successfully removed role from {participant.DisplayName}";
                }

                // Refresh data to show updated roles
                await LoadData();
                
                // Notify parent component
                if (OnRoleAssigned.HasDelegate)
                {
                    await OnRoleAssigned.InvokeAsync();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to remove role: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing role: {ex.Message}";
            Console.WriteLine($"Error removing role: {ex}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task DeleteUser(int userId, string displayName)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{displayName}'? This will remove them completely from the auction."))
            {
                return;
            }

            deletingUsers.Add(userId);
            errorMessage = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Management authentication required";
                return;
            }

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.DeleteAsync($"/api/management/auctions/{AuctionId}/users/{userId}");
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Successfully deleted user '{displayName}'";
                
                // Refresh data to show updated participant list
                await LoadData();
                
                // Notify parent component
                if (OnRoleAssigned.HasDelegate)
                {
                    await OnRoleAssigned.InvokeAsync();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to delete user: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting user: {ex.Message}";
            Console.WriteLine($"Error deleting user: {ex}");
        }
        finally
        {
            deletingUsers.Remove(userId);
            StateHasChanged();
        }
    }

    private string GetSelectedRole(int userId) => selectedRoles.TryGetValue(userId, out var role) ? role : string.Empty;
    private int GetSelectedTeamId(int userId) => selectedTeamIds.TryGetValue(userId, out var teamId) ? teamId : 0;
    private string GetSelectedTeamIdString(int userId) => GetSelectedTeamId(userId).ToString();
    
    private void SetSelectedRole(int userId, string role)
    {
        if (string.IsNullOrEmpty(role))
        {
            selectedRoles.Remove(userId);
        }
        else
        {
            selectedRoles[userId] = role;
        }
    }
    
    private void SetSelectedTeamId(int userId, int teamId)
    {
        if (teamId <= 0)
        {
            selectedTeamIds.Remove(userId);
        }
        else
        {
            selectedTeamIds[userId] = teamId;
        }
    }
    
    private void SetSelectedTeamIdString(int userId, string teamIdString)
    {
        if (int.TryParse(teamIdString, out var teamId))
        {
            SetSelectedTeamId(userId, teamId);
        }
        else
        {
            selectedTeamIds.Remove(userId);
        }
    }

    private string GetTeamName(int teamId)
    {
        return availableTeams.FirstOrDefault(t => t.TeamId == teamId)?.TeamName ?? $"Team {teamId}";
    }

    private string GetTeamNameFromString(string teamIdString)
    {
        if (int.TryParse(teamIdString, out var teamId))
        {
            return GetTeamName(teamId);
        }
        return teamIdString;
    }

    private List<TeamDto> CreatePlaceholderTeams()
    {
        // Create placeholder teams until the auction setup creates real teams
        return new List<TeamDto>
        {
            new() { TeamId = 1, TeamName = "Team 1", Budget = 200m, NominationOrder = 1, IsActive = true },
            new() { TeamId = 2, TeamName = "Team 2", Budget = 200m, NominationOrder = 2, IsActive = true },
            new() { TeamId = 3, TeamName = "Team 3", Budget = 200m, NominationOrder = 3, IsActive = true },
            new() { TeamId = 4, TeamName = "Team 4", Budget = 200m, NominationOrder = 4, IsActive = true },
            new() { TeamId = 5, TeamName = "Team 5", Budget = 200m, NominationOrder = 5, IsActive = true },
            new() { TeamId = 6, TeamName = "Team 6", Budget = 200m, NominationOrder = 6, IsActive = true }
        };
    }

    private static Appearance GetRoleAppearance(string role) => role switch
    {
        "AuctionMaster" => Appearance.Accent,
        "TeamCoach" => Appearance.Stealth,
        "ProxyCoach" => Appearance.Neutral,
        _ => Appearance.Lightweight
    };

    private static string GetRoleColor(string role) => role switch
    {
        "AuctionMaster" => "#0078d4",
        "TeamCoach" => "#107c10",
        "ProxyCoach" => "#ca5010",
        _ => "#605e5c"
    };

    private static string GetRoleDisplayName(string role) => role switch
    {
        "AuctionMaster" => "Auction Master",
        "TeamCoach" => "Team Coach",
        "ProxyCoach" => "Proxy Coach",
        "Viewer" => "Viewer",
        _ => role
    };

    // DTOs matching the API models
    private class ParticipantDto
    {
        public int UserId { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public bool IsConnected { get; set; }
        public DateTime JoinedDate { get; set; }
        public DateTime LastActiveDate { get; set; }
        public bool IsReconnectionPending { get; set; }
        public List<RoleDto> Roles { get; set; } = new();
    }

    private class RoleDto
    {
        public int UserRoleId { get; set; }
        public string Role { get; set; } = string.Empty;
        public int? TeamId { get; set; }
        public string? TeamName { get; set; }
        public DateTime AssignedDate { get; set; }
    }

    private class TeamDto
    {
        public int TeamId { get; set; }
        public string TeamName { get; set; } = string.Empty;
        public decimal Budget { get; set; }
        public int NominationOrder { get; set; }
        public bool IsActive { get; set; }
    }

    private class AssignRoleRequest
    {
        public string Role { get; set; } = string.Empty;
        public int? TeamId { get; set; }
    }

    private class ManageTeamsResponse
    {
        public List<TeamDto> Teams { get; set; } = new();
    }
}

<style>
    .role-assignment-panel {
        margin-bottom: 24px;
    }

    .panel-header {
        margin-bottom: 20px;
        padding: 20px 20px 0;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
        gap: 12px;
    }

    .role-assignment-panel fluent-card {
        padding: 0;
        border: 1px solid #e1e1e1;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        overflow: visible; /* Allow dropdowns to extend outside the card */
    }

    .role-assignment-panel fluent-data-grid {
        padding: 0 20px 20px;
        overflow: visible; /* Allow dropdowns to extend outside the grid */
    }

    /* Make the grid more compact */
    .role-assignment-panel fluent-data-grid::part(grid) {
        font-size: 14px;
        overflow: visible; /* Ensure grid doesn't clip dropdowns */
    }

    .role-assignment-panel fluent-data-grid-cell {
        padding: 8px 4px;
        vertical-align: middle;
        overflow: visible; /* Allow cell contents to extend beyond cell bounds */
    }

    /* Ensure dropdowns have proper z-index and visibility */
    .role-assignment-panel fluent-select {
        position: relative;
        z-index: 1000;
    }

    .role-assignment-panel fluent-select::part(listbox) {
        z-index: 1001;
        max-height: 200px;
        overflow-y: auto;
    }

    /* Fix specific FluentUI dropdown issues */
    .role-assignment-panel .fluent-select-anchor {
        position: relative;
        z-index: 1000;
    }

    /* Ensure the dropdown options are visible */
    fluent-option {
        background-color: white;
        padding: 8px 12px;
        border-bottom: 1px solid #f0f0f0;
    }

    fluent-option:hover {
        background-color: #f5f5f5;
    }

    fluent-option[selected] {
        background-color: #e3f2fd;
    }
</style>