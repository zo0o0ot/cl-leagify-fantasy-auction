@using System.Net.Http.Json
@using LeagifyFantasyAuction.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="auction-config-step">
    <!-- Step Header -->
    <div class="step-header">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
            <FluentLabel Typo="Typography.Subject">Auction Configuration</FluentLabel>
            <FluentLabel Style="color: #666;">
                Configure team budgets, nomination order, and other auction settings before starting.
            </FluentLabel>
        </FluentStack>
    </div>

    <div class="step-body">
        @if (isLoading)
        {
            <div class="loading-section">
                <FluentProgressRing />
                <FluentLabel>Loading auction configuration...</FluentLabel>
            </div>
        }
        else
        {
            <div class="config-container">
                
                <!-- Budget Configuration -->
                <FluentCard Style="margin-bottom: 24px;">
                    <div style="padding: 20px;">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Money())" Style="color: #0078d4;" />
                                <FluentLabel Weight="FontWeight.Bold">Budget Configuration</FluentLabel>
                            </FluentStack>
                            
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16" Wrap="true">
                                <div style="width: 200px;">
                                    <FluentNumberField @bind-Value="budgetPerTeam" 
                                                       Label="Budget per Team ($)" 
                                                       Min="100" 
                                                       Max="10000"
                                                       Step="50"
                                                       Required="true" />
                                </div>
                                <div style="flex: 1; min-width: 300px;">
                                    <FluentLabel Style="color: #666; font-size: 14px;">
                                        Each team will start with this budget for bidding. 
                                        Recommended: $@GetRecommendedBudget() based on @totalRosterSlots roster slots.
                                    </FluentLabel>
                                </div>
                            </FluentStack>
                            
                            @if (budgetPerTeam > 0 && totalRosterSlots > 0)
                            {
                                <div style="background: #f8f9fa; padding: 16px; border-radius: 8px;">
                                    <FluentLabel Style="font-size: 14px; color: #666;">
                                        <strong>Budget Analysis:</strong> 
                                        Average $@Math.Round((double)budgetPerTeam / totalRosterSlots, 2) per school, 
                                        with minimum $1 reserve for final roster slot.
                                    </FluentLabel>
                                </div>
                            }
                        </FluentStack>
                    </div>
                </FluentCard>

                <!-- Team Count Configuration -->
                <FluentCard Style="margin-bottom: 24px;">
                    <div style="padding: 20px;">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                <FluentIcon Value="@(new Icons.Regular.Size20.People())" Style="color: #0078d4;" />
                                <FluentLabel Weight="FontWeight.Bold">Team Configuration</FluentLabel>
                            </FluentStack>
                            
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16" Wrap="true">
                                <div style="width: 200px;">
                                    <FluentNumberField @bind-Value="expectedTeamCount" 
                                                       @onchange="OnTeamCountChanged"
                                                       Label="Number of Teams" 
                                                       Min="2" 
                                                       Max="20"
                                                       Required="true" />
                                </div>
                                <div style="flex: 1; min-width: 300px;">
                                    <FluentLabel Style="color: #666; font-size: 14px;">
                                        Number of teams expected to participate in the auction. 
                                        This will determine draft order and budget calculations.
                                    </FluentLabel>
                                </div>
                            </FluentStack>
                            
                            @if (expectedTeamCount > 0 && totalRosterSlots > 0)
                            {
                                <div style="background: #f8f9fa; padding: 16px; border-radius: 8px;">
                                    <div>
                                        <FluentLabel Style="font-size: 14px; color: #666; margin-bottom: 8px;">
                                            <strong>Team Analysis:</strong> 
                                            @expectedTeamCount teams × @totalRosterSlots slots = @(expectedTeamCount * totalRosterSlots) total schools needed.
                                            Available schools: @availableSchoolCount
                                        </FluentLabel>
                                        
                                        @{
                                            var positionValidation = GetPositionValidationResults();
                                        }
                                        
                                        @if (positionValidation.HasErrors)
                                        {
                                            <div style="margin-top: 8px;">
                                                <FluentLabel Style="font-size: 14px; color: #d13438; font-weight: 600;">
                                                    ⚠️ Position-specific issues detected:
                                                </FluentLabel>
                                                @foreach (var error in positionValidation.Errors)
                                                {
                                                    <div style="font-size: 13px; color: #d13438; margin-left: 16px;">
                                                        • @error
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if (positionValidation.HasWarnings)
                                        {
                                            <div style="margin-top: 8px;">
                                                <FluentLabel Style="font-size: 14px; color: #ff8c00; font-weight: 600;">
                                                    ⚠️ Position constraints detected:
                                                </FluentLabel>
                                                @foreach (var warning in positionValidation.Warnings)
                                                {
                                                    <div style="font-size: 13px; color: #ff8c00; margin-left: 16px;">
                                                        • @warning
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <FluentLabel Style="font-size: 14px; color: #107c10; font-weight: 600; margin-top: 8px;">
                                                ✅ All position requirements can be satisfied
                                            </FluentLabel>
                                        }
                                    </div>
                                </div>
                            }
                        </FluentStack>
                    </div>
                </FluentCard>

                <!-- Team Names Configuration -->
                @if (expectedTeamCount > 0)
                {
                    <FluentCard Style="margin-bottom: 24px;">
                        <div style="padding: 20px;">
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Style="color: #0078d4;" />
                                    <FluentLabel Weight="FontWeight.Bold">Team Names</FluentLabel>
                                </FluentStack>
                                
                                <FluentLabel Style="color: #666; font-size: 14px;">
                                    Enter the names of the @expectedTeamCount teams that will participate in the auction.
                                </FluentLabel>
                                
                                @if (teamNames.Count != expectedTeamCount)
                                {
                                    <FluentButton Appearance="Appearance.Neutral" 
                                                  OnClick="@InitializeTeamNames"
                                                  IconStart="@(new Icons.Regular.Size16.Add())">
                                        Initialize @expectedTeamCount Team Names
                                    </FluentButton>
                                }
                                else
                                {
                                    <div style="display: grid; gap: 12px;">
                                        @for (int i = 0; i < teamNames.Count; i++)
                                        {
                                            var index = i; // Capture for lambda
                                            <div style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #dee2e6; border-radius: 6px;">
                                                <FluentLabel Style="min-width: 60px; font-weight: 600;">Team @(index + 1):</FluentLabel>
                                                <FluentTextField @bind-Value="teamNames[index]" 
                                                                 Style="flex: 1;"
                                                                 Placeholder="Enter team name..." />
                                            </div>
                                        }
                                    </div>
                                }
                            </FluentStack>
                        </div>
                    </FluentCard>
                }

                <!-- Nomination Order Configuration -->
                @if (expectedTeamCount > 0 && teamNames.Count == expectedTeamCount && teamNames.All(name => !string.IsNullOrWhiteSpace(name)))
                {
                    <FluentCard Style="margin-bottom: 24px;" Class="nomination-order-section">
                        <div style="padding: 20px;">
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" Style="color: #0078d4;" />
                                    <FluentLabel Weight="FontWeight.Bold">Nomination Order</FluentLabel>
                                </FluentStack>
                                
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="16">
                                    <div style="display: flex; flex-direction: column; gap: 8px;">
                                        <FluentLabel>Order Type</FluentLabel>
                                        <select @bind="nominationOrderType" style="width: 200px; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
                                            <option value="random">Random</option>
                                            <option value="alphabetical">Alphabetical</option>
                                            <option value="reverse_alphabetical">Reverse Alphabetical</option>
                                            <option value="manual">Manual (Custom Order)</option>
                                        </select>
                                    </div>
                                                  
                                    <FluentButton Appearance="Appearance.Neutral" 
                                                  OnClick="@GenerateNominationOrder"
                                                  IconStart="@(new Icons.Regular.Size16.ArrowClockwise())">
                                        @(nominationOrderType == "manual" ? "Generate Manual Order" : $"Generate {ToTitleCase(nominationOrderType.Replace("_", " "))} Order")
                                    </FluentButton>
                                </FluentStack>
                                
                                @if (nominationOrder.Any())
                                {
                                    <div style="background: #f8f9fa; padding: 16px; border-radius: 8px;">
                                        <FluentLabel Weight="FontWeight.Bold" Style="margin-bottom: 12px;">Current Nomination Order:</FluentLabel>
                                        
                                        @if (nominationOrderType == "manual")
                                        {
                                            <!-- Manual ordering with up/down buttons -->
                                            @if (!nominationOrder.Any())
                                            {
                                                <FluentMessageBar Intent="MessageIntent.Info">
                                                    Click "Generate Manual Order" to create an initial order that you can customize.
                                                </FluentMessageBar>
                                            }
                                            else
                                            {
                                                <div style="display: grid; gap: 8px;">
                                                    @for (int i = 0; i < nominationOrder.Count; i++)
                                                    {
                                                        var index = i;
                                                        <div style="display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid #dee2e6; border-radius: 6px; background: white;">
                                                            <FluentLabel Style="min-width: 40px; font-weight: 600;">@(index + 1).</FluentLabel>
                                                            <FluentLabel Style="flex: 1;">@nominationOrder[index]</FluentLabel>
                                                            <FluentButton Appearance="Appearance.Neutral" 
                                                                          IconStart="@(new Icons.Regular.Size16.ArrowUp())"
                                                                          OnClick="@(() => MoveTeamUp(index))"
                                                                          Disabled="@(index == 0)"
                                                                          Title="Move up" />
                                                            <FluentButton Appearance="Appearance.Neutral" 
                                                                          IconStart="@(new Icons.Regular.Size16.ArrowDown())"
                                                                          OnClick="@(() => MoveTeamDown(index))"
                                                                          Disabled="@(index == nominationOrder.Count - 1)"
                                                                          Title="Move down" />
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <!-- Read-only order display -->
                                            <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                                                @{
                                                    var displayOrder = nominationOrder.ToList();
                                                }
                                                @foreach (var (team, index) in displayOrder.Select((team, index) => (team, index)))
                                                {
                                                    <FluentBadge Fill="someValue" BackgroundColor="#0078d4" Color="white">
                                                        @(index + 1). @team
                                                    </FluentBadge>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <FluentMessageBar Intent="MessageIntent.Warning">
                                        Generate or set the nomination order before proceeding.
                                    </FluentMessageBar>
                                }
                            </FluentStack>
                        </div>
                    </FluentCard>
                }

                <!-- Additional Settings -->
                <FluentCard Style="margin-bottom: 24px;">
                    <div style="padding: 20px;">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Settings())" Style="color: #0078d4;" />
                                <FluentLabel Weight="FontWeight.Bold">Auction Settings</FluentLabel>
                            </FluentStack>
                            
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                                <FluentCheckbox @bind-Value="allowProxyBidding"
                                                Label="Allow proxy bidding (one person can bid for multiple teams)" />
                                
                                <FluentCheckbox @bind-Value="enableBudgetWarnings"
                                                Label="Show budget warnings when teams approach their limit" />
                                
                                <FluentCheckbox @bind-Value="shuffleNominationOrder"
                                                Label="Shuffle nomination order for each round" />
                            </FluentStack>
                        </FluentStack>
                    </div>
                </FluentCard>

                <!-- Action Buttons -->
                <div style="text-align: center; padding-top: 24px;">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="16" HorizontalAlignment="HorizontalAlignment.Center">
                        <FluentButton Appearance="Appearance.Accent" 
                                      OnClick="@SaveConfiguration"
                                      Loading="@isSaving"
                                      Disabled="@(!IsConfigurationValid())"
                                      IconEnd="@(new Icons.Regular.Size16.Save())">
                            Save Configuration
                        </FluentButton>
                    </FluentStack>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int AuctionId { get; set; }
    [Parameter] public AuctionDto? Auction { get; set; }
    [Parameter] public EventCallback OnCompleted { get; set; }

    private bool isLoading = true;
    private bool isSaving = false;
    private int budgetPerTeam = 200;
    private int totalRosterSlots = 0;
    private int expectedTeamCount = 6; // Default to 6 teams
    private int availableSchoolCount = 0;
    private Dictionary<string, int> availableSchoolsByPosition = new();
    private List<RosterPositionDto> rosterPositions = new();
    private List<string> teamNames = new();
    private string nominationOrderType = "random";
    private List<string> nominationOrder = new();
    private bool allowProxyBidding = true;
    private bool enableBudgetWarnings = true;
    private bool shuffleNominationOrder = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentConfiguration();
        await LoadRosterSlotCount();
        await LoadAvailableSchoolCount();
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadCurrentConfiguration()
    {
        // Configuration loading temporarily disabled - API endpoint not implemented yet
        // This will use default values for now
        await Task.CompletedTask;
        
        // try
        // {
        //     var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
        //     if (string.IsNullOrEmpty(token)) return;

        //     Http.DefaultRequestHeaders.Remove("X-Management-Token");
        //     Http.DefaultRequestHeaders.Add("X-Management-Token", token);

        //     // Load existing auction configuration if available
        //     var response = await Http.GetAsync($"/api/management/auctions/{AuctionId}/configuration");
        //     if (response.IsSuccessStatusCode)
        //     {
        //         var config = await response.Content.ReadFromJsonAsync<AuctionConfiguration>();
        //         if (config != null)
        //         {
        //             budgetPerTeam = config.BudgetPerTeam;
        //             nominationOrder = config.NominationOrder ?? new List<string>();
        //             allowProxyBidding = config.AllowProxyBidding;
        //             enableBudgetWarnings = config.EnableBudgetWarnings;
        //             shuffleNominationOrder = config.ShuffleNominationOrder;
        //         }
        //     }
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error loading configuration: {ex.Message}");
        // }
    }

    private async Task LoadRosterSlotCount()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            var response = await Http.GetAsync($"/api/management/auctions/{AuctionId}/roster-positions");
            if (response.IsSuccessStatusCode)
            {
                var positions = await response.Content.ReadFromJsonAsync<List<RosterPositionDto>>();
                rosterPositions = positions ?? new List<RosterPositionDto>();
                totalRosterSlots = rosterPositions.Sum(p => p.SlotsPerTeam);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading roster slots: {ex.Message}");
        }
    }

    private async Task LoadAvailableSchoolCount()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "managementToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Remove("X-Management-Token");
            Http.DefaultRequestHeaders.Add("X-Management-Token", token);

            // Load school summary with position breakdown for detailed validation
            var response = await Http.GetAsync($"/api/management/auctions/{AuctionId}/schools/summary");
            if (response.IsSuccessStatusCode)
            {
                var summary = await response.Content.ReadFromJsonAsync<SchoolSummary>();
                availableSchoolCount = summary?.TotalCount ?? 0;
                availableSchoolsByPosition = summary?.PositionBreakdown ?? new Dictionary<string, int>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading school count: {ex.Message}");
        }
    }

    private int GetRecommendedBudget()
    {
        if (totalRosterSlots == 0) return 1000;
        
        // Recommend $50-100 per roster slot, rounded to nearest $50
        var baseRecommendation = totalRosterSlots * 75;
        return ((baseRecommendation + 25) / 50) * 50;
    }

    private void OnTeamCountChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newCount))
        {
            if (newCount != expectedTeamCount)
            {
                expectedTeamCount = newCount;
                
                // Clear team names and nomination order when team count changes
                teamNames.Clear();
                nominationOrder.Clear();
                StateHasChanged();
            }
        }
    }

    private void InitializeTeamNames()
    {
        teamNames.Clear();
        for (int i = 1; i <= expectedTeamCount; i++)
        {
            teamNames.Add($"Team {i}");
        }
        StateHasChanged();
    }

    private async void MoveTeamUp(int index)
    {
        if (index > 0 && index < nominationOrder.Count)
        {
            var team = nominationOrder[index];
            nominationOrder[index] = nominationOrder[index - 1];
            nominationOrder[index - 1] = team;
            
            // Save to localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"nominationOrder_{AuctionId}", 
                System.Text.Json.JsonSerializer.Serialize(nominationOrder.ToArray()));
            
            StateHasChanged();
        }
    }

    private async void MoveTeamDown(int index)
    {
        if (index >= 0 && index < nominationOrder.Count - 1)
        {
            var team = nominationOrder[index];
            nominationOrder[index] = nominationOrder[index + 1];
            nominationOrder[index + 1] = team;
            
            // Save to localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"nominationOrder_{AuctionId}", 
                System.Text.Json.JsonSerializer.Serialize(nominationOrder.ToArray()));
            
            StateHasChanged();
        }
    }

    private async Task GenerateNominationOrder()
    {
        if (expectedTeamCount <= 0 || teamNames.Count != expectedTeamCount) return;
        
        // Use actual team names if available, otherwise fall back to generic names
        var teamsToOrder = teamNames.All(name => !string.IsNullOrWhiteSpace(name)) 
            ? new List<string>(teamNames) 
            : teamNames.Select((name, index) => string.IsNullOrWhiteSpace(name) ? $"Team {index + 1}" : name).ToList();

        // Clear the existing order first to prevent rendering issues
        nominationOrder.Clear();
        StateHasChanged();

        // Then set the new order
        var newOrder = nominationOrderType switch
        {
            "random" => teamsToOrder.OrderBy(x => Guid.NewGuid()).ToList(),
            "alphabetical" => teamsToOrder.OrderBy(x => x).ToList(),
            "reverse_alphabetical" => teamsToOrder.OrderByDescending(x => x).ToList(),
            "manual" => teamsToOrder, // Keep current order for manual
            _ => teamsToOrder.OrderBy(x => Guid.NewGuid()).ToList()
        };

        nominationOrder.AddRange(newOrder);
        
        // Save to localStorage so it persists to the review step
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"nominationOrder_{AuctionId}", 
            System.Text.Json.JsonSerializer.Serialize(nominationOrder.ToArray()));
        
        StateHasChanged();
    }

    private static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        
        var words = input.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        for (int i = 0; i < words.Length; i++)
        {
            if (words[i].Length > 0)
            {
                words[i] = char.ToUpper(words[i][0]) + words[i][1..].ToLower();
            }
        }
        return string.Join(" ", words);
    }

    private PositionValidationResult GetPositionValidationResults()
    {
        var result = new PositionValidationResult();
        
        if (expectedTeamCount <= 0 || !rosterPositions.Any() || !availableSchoolsByPosition.Any())
        {
            return result; // No validation if data not loaded
        }

        foreach (var position in rosterPositions.Where(p => !p.IsFlexPosition))
        {
            var positionName = position.PositionName;
            var slotsPerTeam = position.SlotsPerTeam;
            var totalSlotsNeeded = expectedTeamCount * slotsPerTeam;
            
            if (!availableSchoolsByPosition.ContainsKey(positionName))
            {
                result.Errors.Add($"{positionName}: No schools available for this position");
                continue;
            }
            
            var availableSchools = availableSchoolsByPosition[positionName];
            
            if (availableSchools < totalSlotsNeeded)
            {
                result.Errors.Add($"{positionName}: Need {totalSlotsNeeded} schools ({expectedTeamCount} teams × {slotsPerTeam} slots) but only {availableSchools} available");
            }
            else if (availableSchools < totalSlotsNeeded * 1.5) // Less than 1.5x needed
            {
                result.Warnings.Add($"{positionName}: Tight constraint - {availableSchools} schools for {totalSlotsNeeded} slots needed");
            }
        }
        
        return result;
    }

    private bool IsConfigurationValid()
    {
        // Basic validation
        if (budgetPerTeam <= 0 || expectedTeamCount <= 0) return false;
        
        // Team names must be set and not empty
        if (teamNames.Count != expectedTeamCount || teamNames.Any(name => string.IsNullOrWhiteSpace(name))) return false;
        
        // Nomination order must be complete
        if (nominationOrder.Count != expectedTeamCount) return false;
        
        // Check for sufficient schools
        if (availableSchoolCount < expectedTeamCount * totalRosterSlots) return false;
        
        return true;
    }

    private async Task SaveConfiguration()
    {
        if (!IsConfigurationValid()) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            // Save configuration to localStorage until API endpoint is implemented
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"expectedTeamCount_{AuctionId}", expectedTeamCount.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"budgetPerTeam_{AuctionId}", budgetPerTeam.ToString());
            
            // For now, just simulate saving and complete the step
            // TODO: Implement actual API endpoint for saving configuration
            await Task.Delay(500); // Simulate API call

            await OnCompleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving configuration: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    // DTOs
    public class AuctionConfiguration
    {
        public int AuctionId { get; set; }
        public int BudgetPerTeam { get; set; } = 1000;
        public List<string>? NominationOrder { get; set; }
        public bool AllowProxyBidding { get; set; } = true;
        public bool EnableBudgetWarnings { get; set; } = true;
        public bool ShuffleNominationOrder { get; set; } = false;
    }

    public class RosterPositionDto
    {
        public int RosterPositionId { get; set; }
        public int AuctionId { get; set; }
        public string PositionName { get; set; } = string.Empty;
        public int SlotsPerTeam { get; set; }
        public string ColorCode { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsFlexPosition { get; set; }
    }

    public class SchoolSummary
    {
        public int TotalCount { get; set; }
        public Dictionary<string, int> PositionBreakdown { get; set; } = new();
    }

    public class PositionValidationResult
    {
        public List<string> Errors { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
        public bool HasErrors => Errors.Any();
        public bool HasWarnings => Warnings.Any();
    }

}

<style>
    .auction-config-step {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .step-header {
        padding: 24px 24px 16px 24px;
        border-bottom: 1px solid #e1e1e1;
        background: #f8f9fa;
    }

    .step-body {
        padding: 24px;
        flex: 1;
        overflow-y: auto;
    }

    .config-container {
        max-width: 1000px;
        margin: 0 auto;
    }

    .loading-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        gap: 16px;
    }

    /* Fix dropdown overflow issues */
    .config-container fluent-card {
        overflow: visible !important;
        z-index: 1;
    }
    
    .config-container fluent-select {
        z-index: 100;
    }
    
    /* Ensure nomination order section has proper spacing for dropdown */
    .nomination-order-section {
        position: relative;
        z-index: 10;
        margin-top: 120px; /* Extra space above for dropdown */
        margin-bottom: 60px; /* Some space below */
    }
    
    /* Fix dropdown positioning to open downward */
    .nomination-order-section fluent-select {
        position: relative;
    }
    
    .nomination-order-section fluent-select::part(control) {
        overflow: visible;
    }
</style>