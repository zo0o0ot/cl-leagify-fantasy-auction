// <auto-generated />
using System;
using LeagifyFantasyAuction.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeagifyFantasyAuction.Api.Migrations
{
    [DbContext(typeof(LeagifyAuctionDbContext))]
    [Migration("20250907154254_MakeCreatedByUserRelationshipOptional")]
    partial class MakeCreatedByUserRelationshipOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.AdminAction", b =>
                {
                    b.Property<int>("AdminActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminActionId"));

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AuctionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("AdminActionId");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("AuctionId");

                    b.ToTable("AdminActions");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal?>("CurrentHighBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CurrentHighBidderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentNominatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MasterRecoveryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AuctionId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrentHighBidderUserId");

                    b.HasIndex("CurrentNominatorUserId");

                    b.HasIndex("CurrentSchoolId");

                    b.HasIndex("JoinCode")
                        .IsUnique();

                    b.HasIndex("MasterRecoveryCode")
                        .IsUnique();

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.AuctionSchool", b =>
                {
                    b.Property<int>("AuctionSchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionSchoolId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("AveragePointsForPosition")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Conference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ImportOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LeagifyPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfProspects")
                        .HasColumnType("int");

                    b.Property<decimal>("ProjectedPoints")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ProjectedPointsAboveAverage")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ProjectedPointsAboveReplacement")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ReplacementValueAverageForPosition")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SuggestedAuctionValue")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("AuctionSchoolId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("AuctionId", "IsAvailable");

                    b.HasIndex("AuctionId", "SchoolId")
                        .IsUnique();

                    b.ToTable("AuctionSchools");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.BidHistory", b =>
                {
                    b.Property<int>("BidHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidHistoryId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("AuctionSchoolId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("BidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("BidType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsWinningBid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BidHistoryId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.HasIndex("AuctionSchoolId", "BidDate");

                    b.ToTable("BidHistories", t =>
                        {
                            t.HasCheckConstraint("CK_BidHistory_Amount_Positive", "[BidAmount] > 0");
                        });
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.DraftPick", b =>
                {
                    b.Property<int>("DraftPickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DraftPickId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("AuctionSchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DraftedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsAssignmentConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("NominatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("PickOrder")
                        .HasColumnType("int");

                    b.Property<int>("RosterPositionId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<decimal>("WinningBid")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("WonByUserId")
                        .HasColumnType("int");

                    b.HasKey("DraftPickId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("AuctionSchoolId");

                    b.HasIndex("NominatedByUserId");

                    b.HasIndex("RosterPositionId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WonByUserId");

                    b.ToTable("DraftPicks", t =>
                        {
                            t.HasCheckConstraint("CK_DraftPick_WinningBid_Positive", "[WinningBid] > 0");
                        });
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.NominationOrder", b =>
                {
                    b.Property<int>("NominationOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NominationOrderId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNominated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("bit");

                    b.Property<int>("OrderPosition")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NominationOrderId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("NominationOrders");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.RosterPosition", b =>
                {
                    b.Property<int>("RosterPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RosterPositionId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsFlexPosition")
                        .HasColumnType("bit");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SlotsPerTeam")
                        .HasColumnType("int");

                    b.HasKey("RosterPositionId");

                    b.HasIndex("AuctionId");

                    b.ToTable("RosterPositions", t =>
                        {
                            t.HasCheckConstraint("CK_RosterPosition_ColorCode_Format", "[ColorCode] LIKE '#[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]'");

                            t.HasCheckConstraint("CK_RosterPosition_Slots_Positive", "[SlotsPerTeam] > 0");
                        });
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LogoFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SchoolId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NominationOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingBudget")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TeamName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Teams", t =>
                        {
                            t.HasCheckConstraint("CK_Team_Budget_Positive", "[Budget] > 0 AND [RemainingBudget] >= 0 AND [RemainingBudget] <= [Budget]");
                        });
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReconnectionPending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("LastActiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("UserId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("AuctionId", "DisplayName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.AdminAction", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AdminUser");

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.Auction", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "CurrentHighBidderUser")
                        .WithMany()
                        .HasForeignKey("CurrentHighBidderUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "CurrentNominatorUser")
                        .WithMany()
                        .HasForeignKey("CurrentNominatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeagifyFantasyAuction.Api.Models.AuctionSchool", "CurrentSchool")
                        .WithMany()
                        .HasForeignKey("CurrentSchoolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("CurrentHighBidderUser");

                    b.Navigation("CurrentNominatorUser");

                    b.Navigation("CurrentSchool");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.AuctionSchool", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("AuctionSchools")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.School", "School")
                        .WithMany("AuctionSchools")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("School");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.BidHistory", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("BidHistories")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.AuctionSchool", "AuctionSchool")
                        .WithMany("BidHistories")
                        .HasForeignKey("AuctionSchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "User")
                        .WithMany("BidHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("AuctionSchool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.DraftPick", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("DraftPicks")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.AuctionSchool", "AuctionSchool")
                        .WithMany("DraftPicks")
                        .HasForeignKey("AuctionSchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "NominatedByUser")
                        .WithMany("NominatedPicks")
                        .HasForeignKey("NominatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.RosterPosition", "RosterPosition")
                        .WithMany("DraftPicks")
                        .HasForeignKey("RosterPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.Team", "Team")
                        .WithMany("DraftPicks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "WonByUser")
                        .WithMany("WonPicks")
                        .HasForeignKey("WonByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("AuctionSchool");

                    b.Navigation("NominatedByUser");

                    b.Navigation("RosterPosition");

                    b.Navigation("Team");

                    b.Navigation("WonByUser");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.NominationOrder", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("NominationOrders")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "User")
                        .WithMany("NominationOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.RosterPosition", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("RosterPositions")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.Team", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("Teams")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.User", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Auction", "Auction")
                        .WithMany("Users")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.UserRole", b =>
                {
                    b.HasOne("LeagifyFantasyAuction.Api.Models.Team", "Team")
                        .WithMany("UserRoles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeagifyFantasyAuction.Api.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.Auction", b =>
                {
                    b.Navigation("AuctionSchools");

                    b.Navigation("BidHistories");

                    b.Navigation("DraftPicks");

                    b.Navigation("NominationOrders");

                    b.Navigation("RosterPositions");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.AuctionSchool", b =>
                {
                    b.Navigation("BidHistories");

                    b.Navigation("DraftPicks");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.RosterPosition", b =>
                {
                    b.Navigation("DraftPicks");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.School", b =>
                {
                    b.Navigation("AuctionSchools");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.Team", b =>
                {
                    b.Navigation("DraftPicks");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LeagifyFantasyAuction.Api.Models.User", b =>
                {
                    b.Navigation("BidHistories");

                    b.Navigation("NominatedPicks");

                    b.Navigation("NominationOrders");

                    b.Navigation("Teams");

                    b.Navigation("UserRoles");

                    b.Navigation("WonPicks");
                });
#pragma warning restore 612, 618
        }
    }
}
